/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.isoObject;

public class isoObject implements isoObjectConstants {
  public static int encodeMONRMessage(timeval objectTime, CartesianPosition position, SpeedType speed, AccelerationType acceleration, short driveDirection, short objectState, short readyToArm, short objectErrorState, String monrDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeMONRMessage(timeval.getCPtr(objectTime), objectTime, CartesianPosition.getCPtr(position), position, SpeedType.getCPtr(speed), speed, AccelerationType.getCPtr(acceleration), acceleration, driveDirection, objectState, readyToArm, objectErrorState, monrDataBuffer, bufferLength, debug);
  }

  public static int decodeMONRMessage(String monrDataBuffer, long bufferLength, timeval currentTime, SWIGTYPE_p_unsigned_int objectID, ObjectMonitorType MonitorData, char debug) {
    return isoObjectJNI.decodeMONRMessage(monrDataBuffer, bufferLength, timeval.getCPtr(currentTime), currentTime, SWIGTYPE_p_unsigned_int.getCPtr(objectID), ObjectMonitorType.getCPtr(MonitorData), MonitorData, debug);
  }

  public static int encodeTRAJMessageHeader(int trajectoryID, int trajectoryVersion, String trajectoryName, long nameLength, long numberOfPointsInTraj, String trajDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeTRAJMessageHeader(trajectoryID, trajectoryVersion, trajectoryName, nameLength, numberOfPointsInTraj, trajDataBuffer, bufferLength, debug);
  }

  public static int encodeTRAJMessagePoint(timeval pointTimeFromStart, CartesianPosition position, SpeedType speed, AccelerationType acceleration, float curvature, String trajDataBufferPointer, long remainingBufferLength, char debug) {
    return isoObjectJNI.encodeTRAJMessagePoint(timeval.getCPtr(pointTimeFromStart), pointTimeFromStart, CartesianPosition.getCPtr(position), position, SpeedType.getCPtr(speed), speed, AccelerationType.getCPtr(acceleration), acceleration, curvature, trajDataBufferPointer, remainingBufferLength, debug);
  }

  public static int encodeTRAJMessageFooter(String trajDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeTRAJMessageFooter(trajDataBuffer, bufferLength, debug);
  }

  public static int encodeSTRTMessage(timeval timeOfStart, String strtDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeSTRTMessage(timeval.getCPtr(timeOfStart), timeOfStart, strtDataBuffer, bufferLength, debug);
  }

  public static int encodeOSEMMessage(timeval controlCenterTime, SWIGTYPE_p_unsigned_int desiredTransmitterID, SWIGTYPE_p_double latitude_deg, SWIGTYPE_p_double longitude_deg, SWIGTYPE_p_float altitude_m, SWIGTYPE_p_float maxPositionDeviation_m, SWIGTYPE_p_float maxLateralDeviation_m, SWIGTYPE_p_float minimumPositioningAccuracy_m, String osemDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeOSEMMessage(timeval.getCPtr(controlCenterTime), controlCenterTime, SWIGTYPE_p_unsigned_int.getCPtr(desiredTransmitterID), SWIGTYPE_p_double.getCPtr(latitude_deg), SWIGTYPE_p_double.getCPtr(longitude_deg), SWIGTYPE_p_float.getCPtr(altitude_m), SWIGTYPE_p_float.getCPtr(maxPositionDeviation_m), SWIGTYPE_p_float.getCPtr(maxLateralDeviation_m), SWIGTYPE_p_float.getCPtr(minimumPositioningAccuracy_m), osemDataBuffer, bufferLength, debug);
  }

  public static int decodeOSEMMessage(ObjectSettingsType objectSettingsData, String osemDataBuffer, long bufferLength, SWIGTYPE_p_unsigned_int senderID, char debug) {
    return isoObjectJNI.decodeOSEMMessage(ObjectSettingsType.getCPtr(objectSettingsData), objectSettingsData, osemDataBuffer, bufferLength, SWIGTYPE_p_unsigned_int.getCPtr(senderID), debug);
  }

  public static int encodeOSTMMessage(ObjectCommandType command, String ostmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeOSTMMessage(command.swigValue(), ostmDataBuffer, bufferLength, debug);
  }

  public static int decodeOSTMMessage(String monrDataBuffer, long bufferLength, SWIGTYPE_p_ObjectCommandType command, char debug) {
    return isoObjectJNI.decodeOSTMMessage(monrDataBuffer, bufferLength, SWIGTYPE_p_ObjectCommandType.getCPtr(command), debug);
  }

  public static int encodeHEABMessage(timeval heabTime, ControlCenterStatusType status, String heabDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeHEABMessage(timeval.getCPtr(heabTime), heabTime, status.swigValue(), heabDataBuffer, bufferLength, debug);
  }

  public static int decodeHEABMessage(String heabDataBuffer, long bufferLength, timeval currentTime, HeabMessageDataType heabData, char debug) {
    return isoObjectJNI.decodeHEABMessage(heabDataBuffer, bufferLength, timeval.getCPtr(currentTime), currentTime, HeabMessageDataType.getCPtr(heabData), heabData, debug);
  }

  public static int encodeSYPMMessage(timeval synchronizationTime, timeval freezeTime, String sypmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeSYPMMessage(timeval.getCPtr(synchronizationTime), synchronizationTime, timeval.getCPtr(freezeTime), freezeTime, sypmDataBuffer, bufferLength, debug);
  }

  public static int encodeMTSPMessage(timeval estSyncPointTime, String mtspDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeMTSPMessage(timeval.getCPtr(estSyncPointTime), estSyncPointTime, mtspDataBuffer, bufferLength, debug);
  }

  public static int encodeTRCMMessage(SWIGTYPE_p_unsigned_short triggerID, SWIGTYPE_p_TriggerType_t triggerType, SWIGTYPE_p_TriggerTypeParameter_t param1, SWIGTYPE_p_TriggerTypeParameter_t param2, SWIGTYPE_p_TriggerTypeParameter_t param3, String trcmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeTRCMMessage(SWIGTYPE_p_unsigned_short.getCPtr(triggerID), SWIGTYPE_p_TriggerType_t.getCPtr(triggerType), SWIGTYPE_p_TriggerTypeParameter_t.getCPtr(param1), SWIGTYPE_p_TriggerTypeParameter_t.getCPtr(param2), SWIGTYPE_p_TriggerTypeParameter_t.getCPtr(param3), trcmDataBuffer, bufferLength, debug);
  }

  public static int encodeACCMMessage(SWIGTYPE_p_unsigned_short actionID, SWIGTYPE_p_ActionType_t actionType, SWIGTYPE_p_ActionTypeParameter_t param1, SWIGTYPE_p_ActionTypeParameter_t param2, SWIGTYPE_p_ActionTypeParameter_t param3, String accmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeACCMMessage(SWIGTYPE_p_unsigned_short.getCPtr(actionID), SWIGTYPE_p_ActionType_t.getCPtr(actionType), SWIGTYPE_p_ActionTypeParameter_t.getCPtr(param1), SWIGTYPE_p_ActionTypeParameter_t.getCPtr(param2), SWIGTYPE_p_ActionTypeParameter_t.getCPtr(param3), accmDataBuffer, bufferLength, debug);
  }

  public static int encodeEXACMessage(SWIGTYPE_p_unsigned_short actionID, timeval executionTime, String exacDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeEXACMessage(SWIGTYPE_p_unsigned_short.getCPtr(actionID), timeval.getCPtr(executionTime), executionTime, exacDataBuffer, bufferLength, debug);
  }

  public static int encodeRCMMMessage(RemoteControlManoeuvreMessageType rcmmObjectData, String rcmmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeRCMMMessage(RemoteControlManoeuvreMessageType.getCPtr(rcmmObjectData), rcmmObjectData, rcmmDataBuffer, bufferLength, debug);
  }

  public static int decodeRCMMMessage(String rcmmDataBuffer, long bufferLength, RemoteControlManoeuvreMessageType rcmmData, char debug) {
    return isoObjectJNI.decodeRCMMMessage(rcmmDataBuffer, bufferLength, RemoteControlManoeuvreMessageType.getCPtr(rcmmData), rcmmData, debug);
  }

  public static int encodeINSUPMessage(SupervisorCommandType arg0, String insupDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeINSUPMessage(arg0.swigValue(), insupDataBuffer, bufferLength, debug);
  }

  public static int encodeDCTIMessage(DctiMessageDataType dctiData, String dctiDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeDCTIMessage(DctiMessageDataType.getCPtr(dctiData), dctiData, dctiDataBuffer, bufferLength, debug);
  }

  public static ISOMessageReturnValue decodeDCTIMessage(String dctiDataBuffer, long bufferLength, DctiMessageDataType dctiData, char debug) {
    return ISOMessageReturnValue.swigToEnum(isoObjectJNI.decodeDCTIMessage(dctiDataBuffer, bufferLength, DctiMessageDataType.getCPtr(dctiData), dctiData, debug));
  }

  public static ISOMessageID getISOMessageType(String messageData, long length, char debug) {
    return ISOMessageID.swigToEnum(isoObjectJNI.getISOMessageType(messageData, length, debug));
  }

  public static void setISOCRCVerification(byte enabled) {
    isoObjectJNI.setISOCRCVerification(enabled);
  }

  public static void setTransmitterID(short transmitterID) {
    isoObjectJNI.setTransmitterID(transmitterID);
  }

  public static short getTransmitterID() {
    return isoObjectJNI.getTransmitterID();
  }

  public static int encodePODIMessage(PeerObjectInjectionType peerObjectData, String podiDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodePODIMessage(PeerObjectInjectionType.getCPtr(peerObjectData), peerObjectData, podiDataBuffer, bufferLength, debug);
  }

  public static int decodePODIMessage(String podiDataBuffer, long bufferLength, timeval currentTime, PeerObjectInjectionType peerData, char debug) {
    return isoObjectJNI.decodePODIMessage(podiDataBuffer, bufferLength, timeval.getCPtr(currentTime), currentTime, PeerObjectInjectionType.getCPtr(peerData), peerData, debug);
  }

  public static int encodeOPROMessage(ObjectPropertiesType objectPropertiesData, String oproDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeOPROMessage(ObjectPropertiesType.getCPtr(objectPropertiesData), objectPropertiesData, oproDataBuffer, bufferLength, debug);
  }

  public static int decodeOPROMessage(ObjectPropertiesType objectPropertiesData, String oproDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.decodeOPROMessage(ObjectPropertiesType.getCPtr(objectPropertiesData), objectPropertiesData, oproDataBuffer, bufferLength, debug);
  }

  public static int encodeFOPRMessage(ForeignObjectPropertiesType foreignObjectPropertiesData, String foprDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeFOPRMessage(ForeignObjectPropertiesType.getCPtr(foreignObjectPropertiesData), foreignObjectPropertiesData, foprDataBuffer, bufferLength, debug);
  }

  public static int decodeFOPRMessage(ForeignObjectPropertiesType foreignObjectPropertiesData, String foprDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.decodeFOPRMessage(ForeignObjectPropertiesType.getCPtr(foreignObjectPropertiesData), foreignObjectPropertiesData, foprDataBuffer, bufferLength, debug);
  }

  public static int encodeRDCAMessage(RequestControlActionType requestControlActionData, String rdcaDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeRDCAMessage(RequestControlActionType.getCPtr(requestControlActionData), requestControlActionData, rdcaDataBuffer, bufferLength, debug);
  }

  public static int decodeRDCAMessage(String rdcaDataBuffer, RequestControlActionType requestControlActionData, long bufferLength, timeval currentTime, char debug) {
    return isoObjectJNI.decodeRDCAMessage(rdcaDataBuffer, RequestControlActionType.getCPtr(requestControlActionData), requestControlActionData, bufferLength, timeval.getCPtr(currentTime), currentTime, debug);
  }

  public static int encodeGDRMMessage(GdrmMessageDataType gdrmData, String gdrmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeGDRMMessage(GdrmMessageDataType.getCPtr(gdrmData), gdrmData, gdrmDataBuffer, bufferLength, debug);
  }

  public static ISOMessageReturnValue decodeGDRMMessage(String gdrmDataBuffer, long bufferLength, GdrmMessageDataType gdrmData, char debug) {
    return ISOMessageReturnValue.swigToEnum(isoObjectJNI.decodeGDRMMessage(gdrmDataBuffer, bufferLength, GdrmMessageDataType.getCPtr(gdrmData), gdrmData, debug));
  }

  public static int decodeGREMMessage(String gremDataBuffer, long bufferLength, GeneralResponseMessageType gremData, char debug) {
    return isoObjectJNI.decodeGREMMessage(gremDataBuffer, bufferLength, GeneralResponseMessageType.getCPtr(gremData), gremData, debug);
  }

  public static int encodeGREMMessage(GeneralResponseMessageType gremObjectData, String gremDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeGREMMessage(GeneralResponseMessageType.getCPtr(gremObjectData), gremObjectData, gremDataBuffer, bufferLength, debug);
  }

  public static int encodeDCMMMessage(RemoteControlManoeuvreMessageType command, String dcmmDataBuffer, long bufferLength, char debug) {
    return isoObjectJNI.encodeDCMMMessage(RemoteControlManoeuvreMessageType.getCPtr(command), command, dcmmDataBuffer, bufferLength, debug);
  }

  public static int decodeDCMMMessage(String dcmmDataBuffer, long bufferLenght, RemoteControlManoeuvreMessageType dcmmData, char debug) {
    return isoObjectJNI.decodeDCMMMessage(dcmmDataBuffer, bufferLenght, RemoteControlManoeuvreMessageType.getCPtr(dcmmData), dcmmData, debug);
  }

  public static int objectMonitorDataToASCII(ObjectMonitorType monitorData, String asciiBuffer, long bufferLength) {
    return isoObjectJNI.objectMonitorDataToASCII(ObjectMonitorType.getCPtr(monitorData), monitorData, asciiBuffer, bufferLength);
  }

  public static int ASCIIToObjectMonitorData(String asciiBuffer, ObjectMonitorType monitorData) {
    return isoObjectJNI.ASCIIToObjectMonitorData(asciiBuffer, ObjectMonitorType.getCPtr(monitorData), monitorData);
  }

  public static boolean hasError(ObjectErrorType error) {
    return isoObjectJNI.hasError(ObjectErrorType.getCPtr(error), error);
  }

  public static String objectStateToASCII(ObjectStateType state) {
    return isoObjectJNI.objectStateToASCII(state.swigValue());
  }

  public static ObjectStateType ASCIIToObjectState(String asciiString) {
    return ObjectStateType.swigToEnum(isoObjectJNI.ASCIIToObjectState(asciiString));
  }

  public static void errorStatusToASCII(ObjectErrorType error, String asciiBuffer, long bufferLength) {
    isoObjectJNI.errorStatusToASCII(ObjectErrorType.getCPtr(error), error, asciiBuffer, bufferLength);
  }

  public static ObjectErrorType ASCIIToErrorStatus(String asciiString) {
    return new ObjectErrorType(isoObjectJNI.ASCIIToErrorStatus(asciiString), true);
  }

  public static SWIGTYPE_p_std__mapT_ISO22133__Events__EventType_std__string_t getDescriptions() {
    return new SWIGTYPE_p_std__mapT_ISO22133__Events__EventType_std__string_t(isoObjectJNI.descriptions_get(), true);
  }

  public static SWIGTYPE_p_std__mapT_ISO22133__ObjectStateID_std__string_t getStateNames() {
    return new SWIGTYPE_p_std__mapT_ISO22133__ObjectStateID_std__string_t(isoObjectJNI.stateNames_get(), true);
  }

  public static boolean LessThan(Transition lhs, Transition rhs) {
    return isoObjectJNI.LessThan(Transition.getCPtr(lhs), lhs, Transition.getCPtr(rhs), rhs);
  }

  public static SWIGTYPE_p_std__setT_ISO22133__Transition_t getLanguage() {
    long cPtr = isoObjectJNI.language_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__setT_ISO22133__Transition_t(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_int new_uint32ptr() {
    long cPtr = isoObjectJNI.new_uint32ptr();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_int copy_uint32ptr(long value) {
    long cPtr = isoObjectJNI.copy_uint32ptr(value);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static void delete_uint32ptr(SWIGTYPE_p_unsigned_int obj) {
    isoObjectJNI.delete_uint32ptr(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

  public static void uint32ptr_assign(SWIGTYPE_p_unsigned_int obj, long value) {
    isoObjectJNI.uint32ptr_assign(SWIGTYPE_p_unsigned_int.getCPtr(obj), value);
  }

  public static long uint32ptr_value(SWIGTYPE_p_unsigned_int obj) {
    return isoObjectJNI.uint32ptr_value(SWIGTYPE_p_unsigned_int.getCPtr(obj));
  }

}
