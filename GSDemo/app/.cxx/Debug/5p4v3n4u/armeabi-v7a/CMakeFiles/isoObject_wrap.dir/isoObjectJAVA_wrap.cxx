/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include "trajDecoder.hpp"
#include "iso22133state.hpp"
#include "iso22133object.hpp"
#include "socket.hpp"
#include "server.hpp"
#include "iso22133.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TrajDecoder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  TrajDecoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (TrajDecoder *)new TrajDecoder(arg1);
  *(TrajDecoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TrajDecoder_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TrajDecoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TrajDecoder *)new TrajDecoder();
  *(TrajDecoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajDecoder_1DecodeTRAJ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  std::vector< char > *arg2 = 0 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  result = (ssize_t)(arg1)->DecodeTRAJ(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajDecoder_1ExpectingTrajPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  result = (bool)((TrajDecoder const *)arg1)->ExpectingTrajPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajDecoder_1getTrajHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  TrajectoryHeaderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  result = ((TrajDecoder const *)arg1)->getTrajHeader();
  *(TrajectoryHeaderType **)&jresult = new TrajectoryHeaderType((const TrajectoryHeaderType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajDecoder_1getTraj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  SwigValueWrapper< std::vector< TrajectoryWaypointType > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  result = ((TrajDecoder const *)arg1)->getTraj();
  *(std::vector< TrajectoryWaypointType > **)&jresult = new std::vector< TrajectoryWaypointType >((const std::vector< TrajectoryWaypointType > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1TrajDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TrajDecoder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1ARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_ARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1DISARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_DISARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_RUNNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1POSTRUN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_POSTRUN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1REMOTE_1CONTROLLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_REMOTE_CONTROLLED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1ABORTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_ABORTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1PRE_1ARMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_PRE_ARMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1PRE_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_PRE_RUNNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_descriptions_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< ISO22133::Events::EventType,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< ISO22133::Events::EventType,std::string > *)&ISO22133::Events::descriptions;
  *(std::map< ISO22133::Events::EventType,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_stateNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< ISO22133::ObjectStateID,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< ISO22133::ObjectStateID,std::string > *)&ISO22133::stateNames;
  *(std::map< ISO22133::ObjectStateID,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1State(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::State **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_State_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::State **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::State const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_State_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::State **)&jarg1; 
  result = ((ISO22133::State const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_State_1handleEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  ISO22133::Events::EventType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::State **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  arg3 = (ISO22133::Events::EventType)jarg3; 
  (arg1)->handleEvent(*arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Unknown_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Unknown *arg1 = (ISO22133::Unknown *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Unknown **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Unknown const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Unknown(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Unknown *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Unknown *)new ISO22133::Unknown();
  *(ISO22133::Unknown **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Unknown(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Unknown *arg1 = (ISO22133::Unknown *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Unknown **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Off_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Off *arg1 = (ISO22133::Off *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Off **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Off const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Off(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Off *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Off *)new ISO22133::Off();
  *(ISO22133::Off **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Off(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Off *arg1 = (ISO22133::Off *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Off **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Init_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Init *arg1 = (ISO22133::Init *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Init **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Init const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Init_1onExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::Init *arg1 = (ISO22133::Init *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Init **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onExit(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Init(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Init *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Init *)new ISO22133::Init();
  *(ISO22133::Init **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Init *arg1 = (ISO22133::Init *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Init **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Armed_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Armed *arg1 = (ISO22133::Armed *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Armed **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Armed const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Armed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Armed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Armed *)new ISO22133::Armed();
  *(ISO22133::Armed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Armed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Armed *arg1 = (ISO22133::Armed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Armed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Disarmed_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Disarmed const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Disarmed_1onEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onEnter(*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Disarmed_1onExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onExit(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Disarmed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Disarmed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Disarmed *)new ISO22133::Disarmed();
  *(ISO22133::Disarmed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Disarmed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Running_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Running *arg1 = (ISO22133::Running *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Running **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Running const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Running(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Running *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Running *)new ISO22133::Running();
  *(ISO22133::Running **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Running(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Running *arg1 = (ISO22133::Running *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Running **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PostRun_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::PostRun *arg1 = (ISO22133::PostRun *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::PostRun **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::PostRun const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1PostRun(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::PostRun *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::PostRun *)new ISO22133::PostRun();
  *(ISO22133::PostRun **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1PostRun(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::PostRun *arg1 = (ISO22133::PostRun *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::PostRun **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlled_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::RemoteControlled *arg1 = (ISO22133::RemoteControlled *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::RemoteControlled **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::RemoteControlled const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RemoteControlled(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::RemoteControlled *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::RemoteControlled *)new ISO22133::RemoteControlled();
  *(ISO22133::RemoteControlled **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RemoteControlled(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::RemoteControlled *arg1 = (ISO22133::RemoteControlled *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::RemoteControlled **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Aborting_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Aborting *arg1 = (ISO22133::Aborting *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Aborting **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Aborting const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Aborting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Aborting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Aborting *)new ISO22133::Aborting();
  *(ISO22133::Aborting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Aborting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Aborting *arg1 = (ISO22133::Aborting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Aborting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PreArming_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::PreArming *arg1 = (ISO22133::PreArming *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::PreArming **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::PreArming const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PreArming_1onEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::PreArming *arg1 = (ISO22133::PreArming *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::PreArming **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onEnter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1PreArming(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::PreArming *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::PreArming *)new ISO22133::PreArming();
  *(ISO22133::PreArming **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1PreArming(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::PreArming *arg1 = (ISO22133::PreArming *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::PreArming **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PreRunning_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::PreRunning *arg1 = (ISO22133::PreRunning *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::PreRunning **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::PreRunning const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PreRunning_1onEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::PreRunning *arg1 = (ISO22133::PreRunning *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::PreRunning **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onEnter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1PreRunning(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::PreRunning *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::PreRunning *)new ISO22133::PreRunning();
  *(ISO22133::PreRunning **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1PreRunning(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::PreRunning *arg1 = (ISO22133::PreRunning *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::PreRunning **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Transition_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  arg2 = (ISO22133::ObjectStateID)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Transition_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  result = (ISO22133::ObjectStateID) ((arg1)->source);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Transition_1event_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::Events::EventType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  arg2 = (ISO22133::Events::EventType)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Transition_1event_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::Events::EventType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  result = (ISO22133::Events::EventType) ((arg1)->event);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Transition_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  arg2 = (ISO22133::ObjectStateID)jarg2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Transition_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  result = (ISO22133::ObjectStateID) ((arg1)->target);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Transition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Transition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Transition *)new ISO22133::Transition();
  *(ISO22133::Transition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Transition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_LessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ISO22133::Transition *arg1 = 0 ;
  ISO22133::Transition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Transition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::Transition const & reference is null");
    return 0;
  } 
  arg2 = *(ISO22133::Transition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::Transition const & reference is null");
    return 0;
  } 
  result = (bool)ISO22133::operator <((ISO22133::Transition const &)*arg1,(ISO22133::Transition const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_language_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< ISO22133::Transition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< ISO22133::Transition > *)&ISO22133::language;
  *(std::set< ISO22133::Transition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TestObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  ISO22133::TestObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (ISO22133::TestObject *)new ISO22133::TestObject(arg1);
  *(ISO22133::TestObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TestObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ISO22133::TestObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ISO22133::TestObject *)new ISO22133::TestObject((std::string const &)*arg1);
  *(ISO22133::TestObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TestObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::TestObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::TestObject *)new ISO22133::TestObject();
  *(ISO22133::TestObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1TestObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getCurrentStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getCurrentStateName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  CartesianPosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getPosition();
  *(CartesianPosition **)&jresult = new CartesianPosition((const CartesianPosition &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  SpeedType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getSpeed();
  *(SpeedType **)&jresult = new SpeedType((const SpeedType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  AccelerationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getAcceleration();
  *(AccelerationType **)&jresult = new AccelerationType((const AccelerationType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getDriveDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  DriveDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getDriveDirection();
  *(DriveDirectionType **)&jresult = new DriveDirectionType((const DriveDirectionType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getTrajectoryHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  TrajectoryHeaderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getTrajectoryHeader();
  *(TrajectoryHeaderType **)&jresult = new TrajectoryHeaderType((const TrajectoryHeaderType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getTrajectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  SwigValueWrapper< std::vector< TrajectoryWaypointType > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getTrajectory();
  *(std::vector< TrajectoryWaypointType > **)&jresult = new std::vector< TrajectoryWaypointType >((const std::vector< TrajectoryWaypointType > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  GeographicPositionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getOrigin();
  *(GeographicPositionType **)&jresult = new GeographicPositionType((const GeographicPositionType &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getLocalIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getLocalIP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1getTransmitterID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = (uint32_t)((ISO22133::TestObject const *)arg1)->getTransmitterID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1handleAbort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  (arg1)->handleAbort();
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  CartesianPosition *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  arg2 = *(CartesianPosition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CartesianPosition const & reference is null");
    return ;
  } 
  (arg1)->setPosition((CartesianPosition const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  SpeedType *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  arg2 = *(SpeedType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "SpeedType const & reference is null");
    return ;
  } 
  (arg1)->setSpeed((SpeedType const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  AccelerationType *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  arg2 = *(AccelerationType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AccelerationType const & reference is null");
    return ;
  } 
  (arg1)->setAcceleration((AccelerationType const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setDriveDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  DriveDirectionType *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  arg2 = *(DriveDirectionType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "DriveDirectionType const & reference is null");
    return ;
  } 
  (arg1)->setDriveDirection((DriveDirectionType const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setObjectState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  ISO22133::ObjectStateID *arg2 = 0 ;
  ISO22133::ObjectStateID temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  temp2 = (ISO22133::ObjectStateID)jarg2; 
  arg2 = &temp2; 
  (arg1)->setObjectState((ISO22133::ObjectStateID const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setName(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setReadyToArm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->setReadyToArm((int const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TestObject_1setErrorState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  (arg1)->setErrorState((char const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1STREAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  BasicSocket::SocketType result;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket::SocketType)BasicSocket::STREAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1DATAGRAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  BasicSocket::SocketType result;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket::SocketType)BasicSocket::DATAGRAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1HostInfo_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Address *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1HostInfo_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  result = (BasicSocket::Address *) & ((arg1)->address);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1HostInfo_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Port arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  arg2 = (BasicSocket::Port)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1HostInfo_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Port result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  result = (BasicSocket::Port) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1HostInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BasicSocket::HostInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket::HostInfo *)new BasicSocket::HostInfo();
  *(BasicSocket::HostInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1BasicSocket_1HostInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket *)new BasicSocket();
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  bool arg2 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BasicSocket *)new BasicSocket(arg1,arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  result = (BasicSocket *)new BasicSocket(arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BasicSocket *)new BasicSocket(arg1,arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BasicSocket *)new BasicSocket(arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1BasicSocket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BasicSocket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BasicSocket *arg1 = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket const & reference is null");
    return 0;
  } 
  result = (BasicSocket *)new BasicSocket((BasicSocket const &)*arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1basicSockRefRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BasicSocket *arg1 = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket && reference is null");
    return 0;
  } 
  result = (BasicSocket *)new BasicSocket((BasicSocket &&)*arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1basicSockEqualsRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket *arg2 = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = *(BasicSocket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket const & reference is null");
    return 0;
  } 
  result = (BasicSocket *) &(arg1)->operator =((BasicSocket const &)*arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1basicSockEqualsRefRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket *arg2 = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = *(BasicSocket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket && reference is null");
    return 0;
  } 
  result = (BasicSocket *) &(arg1)->operator =((BasicSocket &&)*arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setDebug_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDebug(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setDebug_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setDebug();
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setReuseAddr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReuseAddr(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setReuseAddr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setReuseAddr();
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setKeepAlive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setKeepAlive(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setKeepAlive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setKeepAlive();
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setLinger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLinger(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setLinger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setLinger();
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setLingerSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLingerSeconds(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setBlocking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBlocking(arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1setBlocking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setBlocking();
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1getBlocking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (bool)((BasicSocket const *)arg1)->getBlocking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::SocketType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (BasicSocket::SocketType)((BasicSocket const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1getRemoteIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = ((BasicSocket const *)arg1)->getRemoteIP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1getLocalIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = ((BasicSocket const *)arg1)->getLocalIP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1getRemotePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Port result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (BasicSocket::Port)((BasicSocket const *)arg1)->getRemotePort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1getLocalPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Port result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (BasicSocket::Port)((BasicSocket const *)arg1)->getLocalPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_BasicSocket_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::SocketType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = (BasicSocket::SocketType)jarg2; 
  (arg1)->open(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Socket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Socket *arg1 = 0 ;
  Socket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Socket const & reference is null");
    return 0;
  } 
  result = (Socket *)new Socket((Socket const &)*arg1);
  *(Socket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1socketRefRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Socket *arg1 = 0 ;
  Socket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Socket && reference is null");
    return 0;
  } 
  result = (Socket *)new Socket((Socket &&)*arg1);
  *(Socket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Socket_1sockEqualsRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Socket *arg1 = (Socket *) 0 ;
  Socket *arg2 = 0 ;
  Socket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Socket **)&jarg1; 
  arg2 = *(Socket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Socket const & reference is null");
    return 0;
  } 
  result = (Socket *) &(arg1)->operator =((Socket const &)*arg2);
  *(Socket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Socket_1sockEqualsRefRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Socket *arg1 = (Socket *) 0 ;
  Socket *arg2 = 0 ;
  Socket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Socket **)&jarg1; 
  arg2 = *(Socket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Socket && reference is null");
    return 0;
  } 
  result = (Socket *) &(arg1)->operator =((Socket &&)*arg2);
  *(Socket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Socket_1recv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Socket *arg1 = (Socket *) 0 ;
  SwigValueWrapper< std::vector< char > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1; 
  result = (arg1)->recv();
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Socket_1send_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Socket *arg1 = (Socket *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  (arg1)->send((std::vector< char > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Socket_1send_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Socket *arg1 = (Socket *) 0 ;
  std::vector< char > *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->send((std::vector< char > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Socket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Socket *arg1 = (Socket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Socket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Server_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  bool arg2 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Server *)new Server(arg1,arg2);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Server_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  result = (Server *)new Server(arg1);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Server_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  BasicSocket::Address *arg2 = 0 ;
  BasicSocket::Port arg3 ;
  bool arg4 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (BasicSocket::Port)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (Server *)new Server(arg1,(BasicSocket::Address const &)*arg2,arg3,arg4);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1Server_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  BasicSocket::Address *arg2 = 0 ;
  BasicSocket::Port arg3 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (BasicSocket::Port)jarg3; 
  result = (Server *)new Server(arg1,(BasicSocket::Address const &)*arg2,arg3);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Server *arg1 = (Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Server **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (TCPServer *)new TCPServer(arg1);
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TCPServer *)new TCPServer();
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  bool arg3 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (TCPServer *)new TCPServer((BasicSocket::Address const &)*arg1,arg2,arg3);
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  result = (TCPServer *)new TCPServer((BasicSocket::Address const &)*arg1,arg2);
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TCPServer_1await_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TCPServer *arg1 = (TCPServer *) 0 ;
  SwigValueWrapper< Socket > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TCPServer **)&jarg1; 
  result = (arg1)->await();
  *(Socket **)&jresult = new Socket((const Socket &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TCPServer_1await_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  TCPServer *arg1 = (TCPServer *) 0 ;
  BasicSocket::Address *arg2 = 0 ;
  BasicSocket::Port arg3 ;
  SwigValueWrapper< Socket > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TCPServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (BasicSocket::Port)jarg3; 
  result = (arg1)->await((BasicSocket::Address const &)*arg2,arg3);
  *(Socket **)&jresult = new Socket((const Socket &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1TCPServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TCPServer *arg1 = (TCPServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCPServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (UDPServer *)new UDPServer(arg1);
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UDPServer *)new UDPServer();
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  bool arg3 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (UDPServer *)new UDPServer((BasicSocket::Address const &)*arg1,arg2,arg3);
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  result = (UDPServer *)new UDPServer((BasicSocket::Address const &)*arg1,arg2);
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_UDPServer_1bind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  BasicSocket::HostInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UDPServer **)&jarg1; 
  arg2 = *(BasicSocket::HostInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket::HostInfo const & reference is null");
    return ;
  } 
  (arg1)->bind((BasicSocket::HostInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_UDPServer_1recvfrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UDPServer *arg1 = (UDPServer *) 0 ;
  SwigValueWrapper< std::pair< std::vector< char >,BasicSocket::HostInfo > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UDPServer **)&jarg1; 
  result = (arg1)->recvfrom();
  *(std::pair< std::vector< char >,BasicSocket::HostInfo > **)&jresult = new std::pair< std::vector< char >,BasicSocket::HostInfo >((const std::pair< std::vector< char >,BasicSocket::HostInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_UDPServer_1sendto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  std::pair< std::vector< char > const,BasicSocket::HostInfo const > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UDPServer **)&jarg1; 
  arg2 = *(std::pair< std::vector< char > const,BasicSocket::HostInfo const > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< char > const,BasicSocket::HostInfo const > const & reference is null");
    return ;
  } 
  (arg1)->sendto((std::pair< std::vector< char > const,BasicSocket::HostInfo const > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_UDPServer_1sendto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  std::pair< std::vector< char > const,BasicSocket::HostInfo const > *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UDPServer **)&jarg1; 
  arg2 = *(std::pair< std::vector< char > const,BasicSocket::HostInfo const > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< char > const,BasicSocket::HostInfo const > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->sendto((std::pair< std::vector< char > const,BasicSocket::HostInfo const > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1UDPServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UDPServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_122133_1OBJECT_1UDP_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(53240);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_122133_1DEFAULT_1OBJECT_1TCP_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(53241);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1desiredTransmitterID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->desiredTransmitterID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1desiredTransmitterID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (uint32_t) ((arg1)->desiredTransmitterID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1coordinateSystemOrigin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  GeographicPositionType *arg2 = (GeographicPositionType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = *(GeographicPositionType **)&jarg2; 
  if (arg1) (arg1)->coordinateSystemOrigin = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1coordinateSystemOrigin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  GeographicPositionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (GeographicPositionType *)& ((arg1)->coordinateSystemOrigin);
  *(GeographicPositionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1currentTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  if (arg1) (arg1)->currentTime = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1currentTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (timeval *)& ((arg1)->currentTime);
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1maxPositionDeviation_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->maxPositionDeviation_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1maxPositionDeviation_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (double_t) ((arg1)->maxPositionDeviation_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1maxLateralDeviation_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->maxLateralDeviation_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1maxLateralDeviation_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (double_t) ((arg1)->maxLateralDeviation_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1minRequiredPositioningAccuracy_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->minRequiredPositioningAccuracy_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1minRequiredPositioningAccuracy_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (double_t) ((arg1)->minRequiredPositioningAccuracy_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isTransmitterIDValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTransmitterIDValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isTransmitterIDValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (bool) ((arg1)->isTransmitterIDValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isPositionDeviationLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPositionDeviationLimited = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isPositionDeviationLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (bool) ((arg1)->isPositionDeviationLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isLateralDeviationLimited_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isLateralDeviationLimited = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isLateralDeviationLimited_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (bool) ((arg1)->isLateralDeviationLimited);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isPositioningAccuracyRequired_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPositioningAccuracyRequired = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isPositioningAccuracyRequired_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (bool) ((arg1)->isPositioningAccuracyRequired);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isTimestampValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTimestampValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectSettingsType_1isTimestampValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  result = (bool) ((arg1)->isTimestampValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1ObjectSettingsType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ObjectSettingsType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectSettingsType *)new ObjectSettingsType();
  *(ObjectSettingsType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1ObjectSettingsType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1TRAJ_1HEADER_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOConstantsType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOConstantsType)ISO_TRAJ_HEADER_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1TRAJ_1WAYPOINT_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOConstantsType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOConstantsType)ISO_TRAJ_WAYPOINT_SIZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->trajectoryID = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  result = (uint16_t) ((arg1)->trajectoryID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->trajectoryName, (const char *)arg2, 64-1);
      arg1->trajectoryName[64-1] = 0;
    } else {
      arg1->trajectoryName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  result = (char *)(char *) ((arg1)->trajectoryName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryVersion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->trajectoryVersion = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryVersion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  result = (uint16_t) ((arg1)->trajectoryVersion);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->trajectoryLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1trajectoryLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  result = (uint32_t) ((arg1)->trajectoryLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1nWayPoints_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->nWayPoints = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryHeaderType_1nWayPoints_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  result = (uint32_t) ((arg1)->nWayPoints);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TrajectoryHeaderType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TrajectoryHeaderType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TrajectoryHeaderType *)new TrajectoryHeaderType();
  *(TrajectoryHeaderType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1TrajectoryHeaderType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1relativeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  if (arg1) (arg1)->relativeTime = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1relativeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  result = (timeval *)& ((arg1)->relativeTime);
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1pos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  CartesianPosition *arg2 = (CartesianPosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  arg2 = *(CartesianPosition **)&jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1pos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  CartesianPosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  result = (CartesianPosition *)& ((arg1)->pos);
  *(CartesianPosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1spd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  SpeedType arg2 ;
  SpeedType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  argp2 = *(SpeedType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SpeedType");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->spd = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1spd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  SpeedType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  result =  ((arg1)->spd);
  *(SpeedType **)&jresult = new SpeedType((const SpeedType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1acc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  AccelerationType arg2 ;
  AccelerationType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  argp2 = *(AccelerationType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AccelerationType");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->acc = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1acc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  AccelerationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  result =  ((arg1)->acc);
  *(AccelerationType **)&jresult = new AccelerationType((const AccelerationType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1curvature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  float_t arg2 ;
  float_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  argp2 = *(float_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null float_t");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->curvature = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TrajectoryWaypointType_1curvature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  float_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  result =  ((arg1)->curvature);
  *(float_t **)&jresult = new float_t((const float_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1TrajectoryWaypointType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TrajectoryWaypointType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TrajectoryWaypointType *)new TrajectoryWaypointType();
  *(TrajectoryWaypointType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1TrajectoryWaypointType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1COMMAND_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCommandType)OBJECT_COMMAND_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1COMMAND_1DISARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCommandType)OBJECT_COMMAND_DISARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1COMMAND_1REMOTE_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCommandType)OBJECT_COMMAND_REMOTE_CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1COMMAND_1ALL_1CLEAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCommandType)OBJECT_COMMAND_ALL_CLEAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HEAB_1FREQUENCY_1HZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(100);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CONTROL_1CENTER_1STATUS_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlCenterStatusType)CONTROL_CENTER_STATUS_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CONTROL_1CENTER_1STATUS_1READY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlCenterStatusType)CONTROL_CENTER_STATUS_READY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CONTROL_1CENTER_1STATUS_1ABORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlCenterStatusType)CONTROL_CENTER_STATUS_ABORT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CONTROL_1CENTER_1STATUS_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlCenterStatusType)CONTROL_CENTER_STATUS_RUNNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CONTROL_1CENTER_1STATUS_1TEST_1DONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlCenterStatusType)CONTROL_CENTER_STATUS_TEST_DONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CONTROL_1CENTER_1STATUS_1NORMAL_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  result = (ControlCenterStatusType)CONTROL_CENTER_STATUS_NORMAL_STOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MONR_1EXPECTED_1FREQUENCY_1HZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(100);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DIRECT_1CONTROL_1TRANSMITTER_1ID_1REQUEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralDataRequestDataCodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralDataRequestDataCodeType)DIRECT_CONTROL_TRANSMITTER_ID_REQUEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1UNDEFINED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_UNDEFINED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1TYPE_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_TYPE_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1SPEED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_SPEED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1DISTANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_DISTANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1ACCELERATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_ACCELERATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1LANE_1CHANGED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_LANE_CHANGED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1LANE_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_LANE_OFFSET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1POSITION_1REACHED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_POSITION_REACHED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1POSITION_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_POSITION_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1POSITION_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_POSITION_OFFSET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1STEERING_1ANGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_STEERING_ANGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1THROTTLE_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_THROTTLE_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1BRAKE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_BRAKE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1ACTIVE_1TRAJECTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_ACTIVE_TRAJECTORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1OTHER_1OBJECT_1FEATURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_OTHER_OBJECT_FEATURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1INFRASTRUCTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_INFRASTRUCTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1TEST_1SCENARIO_1EVENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_TEST_SCENARIO_EVENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1MISC_1DIGITAL_1INPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_MISC_DIGITAL_INPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1MISC_1ANALOG_1INPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_MISC_ANALOG_INPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1TIMER_1EVENT_1OCCURRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_TIMER_EVENT_OCCURRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1MODE_1CHANGED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_MODE_CHANGED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1UNAVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerType_t)TRIGGER_UNAVAILABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1FALSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_FALSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1TRUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_TRUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1RELEASED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_RELEASED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1PRESSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_PRESSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1RISING_1EDGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_RISING_EDGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1FALLING_1EDGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_FALLING_EDGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1ANY_1EDGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_ANY_EDGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1RELATIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_RELATIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1ABSOLUTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_ABSOLUTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1MEAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_MEAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1EQUAL_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_EQUAL_TO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1GREATER_1THAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_GREATER_THAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1GREATER_1THAN_1OR_1EQUAL_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_GREATER_THAN_OR_EQUAL_TO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1LESS_1THAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_LESS_THAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1LESS_1THAN_1OR_1EQUAL_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_LESS_THAN_OR_EQUAL_TO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1NOT_1EQUAL_1TO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_NOT_EQUAL_TO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_Z;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1DATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_DATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1RULE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_RULE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TRIGGER_1PARAMETER_1UNAVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  TriggerTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (TriggerTypeParameter_t)TRIGGER_PARAMETER_UNAVAILABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1TYPE_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_TYPE_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1TYPE_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_TYPE_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1SET_1SPEED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_SET_SPEED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1SET_1DISTANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_SET_DISTANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1SET_1ACCELERATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_SET_ACCELERATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1LANE_1CHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_LANE_CHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1LANE_1OFFSET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_LANE_OFFSET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1SET_1POSITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_SET_POSITION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1SET_1STEERING_1ANGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_SET_STEERING_ANGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1SET_1TRHOTTLE_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_SET_TRHOTTLE_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1BRAKE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_BRAKE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1FOLLOW_1TRAJECTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_FOLLOW_TRAJECTORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1OTHER_1OBJECT_1FEATURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_OTHER_OBJECT_FEATURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1INFRASTRUCTURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_INFRASTRUCTURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1TEST_1SCENARIO_1COMMAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_TEST_SCENARIO_COMMAND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1MISC_1DIGITAL_1OUTPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_MISC_DIGITAL_OUTPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1MISC_1ANALOG_1OUTPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_MISC_ANALOG_OUTPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1START_1TIMER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_START_TIMER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1MODE_1CHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_MODE_CHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1UNAVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionType_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionType_t)ACTION_UNAVAILABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1SET_1FALSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_SET_FALSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1SET_1TRUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_SET_TRUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1RELEASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_RELEASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1PRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_PRESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1SET_1VALUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_SET_VALUE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1MIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_MIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_Z;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1VS_1BRAKE_1WARNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_VS_BRAKE_WARNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1VS_1SEND_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_VS_SEND_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTION_1PARAMETER_1UNAVAILABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActionTypeParameter_t result;
  
  (void)jenv;
  (void)jcls;
  result = (ActionTypeParameter_t)ACTION_PARAMETER_UNAVAILABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1LENGTH_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_LENGTH_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1TYPE_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_TYPE_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1CRC_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_CRC_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1VERSION_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_VERSION_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1VALUE_1ID_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_VALUE_ID_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1SYNC_1WORD_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_SYNC_WORD_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1CONTENT_1OUT_1OF_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)MESSAGE_CONTENT_OUT_OF_RANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1FUNCTION_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageReturnValue)ISO_FUNCTION_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1TRAJ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_TRAJ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1OSEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_OSEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1OSTM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_OSTM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1STRT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_STRT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1HEAB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_HEAB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1MONR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_MONR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1MONR2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_MONR2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1SOWM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_SOWM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1INFO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_INFO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RCMM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RCMM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1SYPM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_SYPM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1MTSP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_MTSP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1TRCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_TRCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1ACCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_ACCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1TREO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_TREO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1EXAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_EXAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1CATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_CATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RCCM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RCCM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RCRT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RCRT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1PIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_PIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1COSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_COSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1MOMA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_MOMA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RESERVE_1RANGE_11_1LOWER_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RESERVE_RANGE_1_LOWER_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RESERVE_1RANGE_11_1UPPER_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RESERVE_RANGE_1_UPPER_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RESERVE_1RANGE_12_1LOWER_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RESERVE_RANGE_2_LOWER_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1RESERVE_1RANGE_12_1UPPER_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_RESERVE_RANGE_2_UPPER_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1LOWER_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_LOWER_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1UPPER_1LIMIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_UPPER_LIMIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1RISE_1INSUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_RISE_INSUP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1OPRO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_OPRO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1FOPR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_FOPR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1PODI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_PODI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1DCTI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_DCTI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1GDRM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_GDRM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1RDCA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_RDCA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1GREM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_GREM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MESSAGE_1ID_1VENDOR_1SPECIFIC_1ASTAZERO_1DCMM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOMessageID)MESSAGE_ID_VENDOR_SPECIFIC_ASTAZERO_DCMM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_SUPERVISOR_1COMMAND_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SupervisorCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (SupervisorCommandType)SUPERVISOR_COMMAND_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_SUPERVISOR_1COMMAND_1DEBUG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SupervisorCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (SupervisorCommandType)SUPERVISOR_COMMAND_DEBUG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1CATEGORY_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCategoryType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCategoryType)OBJECT_CATEGORY_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1CATEGORY_1CAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCategoryType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCategoryType)OBJECT_CATEGORY_CAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1CATEGORY_1BICYCLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCategoryType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCategoryType)OBJECT_CATEGORY_BICYCLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OBJECT_1CATEGORY_1PEDESTRIAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ObjectCategoryType result;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectCategoryType)OBJECT_CATEGORY_PEDESTRIAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTOR_1TYPE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActorType result;
  
  (void)jenv;
  (void)jcls;
  result = (ActorType)ACTOR_TYPE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTOR_1TYPE_1VIRTUAL_1OBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActorType result;
  
  (void)jenv;
  (void)jcls;
  result = (ActorType)ACTOR_TYPE_VIRTUAL_OBJECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ACTOR_1TYPE_1REAL_1OBJECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ActorType result;
  
  (void)jenv;
  (void)jcls;
  result = (ActorType)ACTOR_TYPE_REAL_OBJECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OPERATION_1MODE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OperationMode result;
  
  (void)jenv;
  (void)jcls;
  result = (OperationMode)OPERATION_MODE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OPERATION_1MODE_1STATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OperationMode result;
  
  (void)jenv;
  (void)jcls;
  result = (OperationMode)OPERATION_MODE_STATIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OPERATION_1MODE_1PREDEFINED_1TRAJECTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OperationMode result;
  
  (void)jenv;
  (void)jcls;
  result = (OperationMode)OPERATION_MODE_PREDEFINED_TRAJECTORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OPERATION_1MODE_1DYNAMIC_1TRAJECTORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OperationMode result;
  
  (void)jenv;
  (void)jcls;
  result = (OperationMode)OPERATION_MODE_DYNAMIC_TRAJECTORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_OPERATION_1MODE_1AUTONOMOUS_1VUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OperationMode result;
  
  (void)jenv;
  (void)jcls;
  result = (OperationMode)OPERATION_MODE_AUTONOMOUS_VUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1UNIT_1TYPE_1STEERING_1DEGREES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOUnitType)ISO_UNIT_TYPE_STEERING_DEGREES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1UNIT_1TYPE_1STEERING_1PERCENTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOUnitType)ISO_UNIT_TYPE_STEERING_PERCENTAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1UNIT_1TYPE_1SPEED_1METER_1SECOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOUnitType)ISO_UNIT_TYPE_SPEED_METER_SECOND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1UNIT_1TYPE_1SPEED_1PERCENTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOUnitType)ISO_UNIT_TYPE_SPEED_PERCENTAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1UNIT_1TYPE_1THROTTLE_1PERCENTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOUnitType)ISO_UNIT_TYPE_THROTTLE_PERCENTAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ISO_1UNIT_1TYPE_1BRAKE_1PERCENTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  result = (ISOUnitType)ISO_UNIT_TYPE_BRAKE_PERCENTAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GREM_1STATUS_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseStatus)GREM_STATUS_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GREM_1DATA_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseStatus)GREM_DATA_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GREM_1STATE_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseStatus)GREM_STATE_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GREM_1TIME_1SLIPPAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseStatus)GREM_TIME_SLIPPAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GREM_1WRONG_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseStatus)GREM_WRONG_ID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GREM_1OUT_1OF_1RANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseStatus)GREM_OUT_OF_RANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MANOEUVRE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RemoteControlManoeuvreCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreCommandType)MANOEUVRE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_MANOEUVRE_1BACK_1TO_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  RemoteControlManoeuvreCommandType result;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreCommandType)MANOEUVRE_BACK_TO_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jshort JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (uint8_t) ((arg1)->status);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringMan_1pct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RemoteControlManoeuvreMessageType::steeringMan *arg1 = (RemoteControlManoeuvreMessageType::steeringMan *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::steeringMan **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->pct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringMan_1pct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RemoteControlManoeuvreMessageType::steeringMan *arg1 = (RemoteControlManoeuvreMessageType::steeringMan *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::steeringMan **)&jarg1; 
  result = (double_t) ((arg1)->pct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringMan_1rad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RemoteControlManoeuvreMessageType::steeringMan *arg1 = (RemoteControlManoeuvreMessageType::steeringMan *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::steeringMan **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->rad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringMan_1rad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RemoteControlManoeuvreMessageType::steeringMan *arg1 = (RemoteControlManoeuvreMessageType::steeringMan *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::steeringMan **)&jarg1; 
  result = (double_t) ((arg1)->rad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RemoteControlManoeuvreMessageType_1steeringMan(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType::steeringMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreMessageType::steeringMan *)new RemoteControlManoeuvreMessageType::steeringMan();
  *(RemoteControlManoeuvreMessageType::steeringMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RemoteControlManoeuvreMessageType_1steeringMan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RemoteControlManoeuvreMessageType::steeringMan *arg1 = (RemoteControlManoeuvreMessageType::steeringMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RemoteControlManoeuvreMessageType::steeringMan **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringManoeuvre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::steeringMan *arg2 = (RemoteControlManoeuvreMessageType::steeringMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = *(RemoteControlManoeuvreMessageType::steeringMan **)&jarg2; 
  if (arg1) (arg1)->steeringManoeuvre = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringManoeuvre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::steeringMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (RemoteControlManoeuvreMessageType::steeringMan *)& ((arg1)->steeringManoeuvre);
  *(RemoteControlManoeuvreMessageType::steeringMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedMan_1pct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RemoteControlManoeuvreMessageType::speedMan *arg1 = (RemoteControlManoeuvreMessageType::speedMan *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::speedMan **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->pct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedMan_1pct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RemoteControlManoeuvreMessageType::speedMan *arg1 = (RemoteControlManoeuvreMessageType::speedMan *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::speedMan **)&jarg1; 
  result = (double_t) ((arg1)->pct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedMan_1m_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RemoteControlManoeuvreMessageType::speedMan *arg1 = (RemoteControlManoeuvreMessageType::speedMan *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::speedMan **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->m_s = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedMan_1m_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RemoteControlManoeuvreMessageType::speedMan *arg1 = (RemoteControlManoeuvreMessageType::speedMan *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::speedMan **)&jarg1; 
  result = (double_t) ((arg1)->m_s);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RemoteControlManoeuvreMessageType_1speedMan(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType::speedMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreMessageType::speedMan *)new RemoteControlManoeuvreMessageType::speedMan();
  *(RemoteControlManoeuvreMessageType::speedMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RemoteControlManoeuvreMessageType_1speedMan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RemoteControlManoeuvreMessageType::speedMan *arg1 = (RemoteControlManoeuvreMessageType::speedMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RemoteControlManoeuvreMessageType::speedMan **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedManoeuvre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::speedMan *arg2 = (RemoteControlManoeuvreMessageType::speedMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = *(RemoteControlManoeuvreMessageType::speedMan **)&jarg2; 
  if (arg1) (arg1)->speedManoeuvre = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedManoeuvre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::speedMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (RemoteControlManoeuvreMessageType::speedMan *)& ((arg1)->speedManoeuvre);
  *(RemoteControlManoeuvreMessageType::speedMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1throttleMan_1pct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RemoteControlManoeuvreMessageType::throttleMan *arg1 = (RemoteControlManoeuvreMessageType::throttleMan *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::throttleMan **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->pct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1throttleMan_1pct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RemoteControlManoeuvreMessageType::throttleMan *arg1 = (RemoteControlManoeuvreMessageType::throttleMan *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::throttleMan **)&jarg1; 
  result = (double_t) ((arg1)->pct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RemoteControlManoeuvreMessageType_1throttleMan(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType::throttleMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreMessageType::throttleMan *)new RemoteControlManoeuvreMessageType::throttleMan();
  *(RemoteControlManoeuvreMessageType::throttleMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RemoteControlManoeuvreMessageType_1throttleMan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RemoteControlManoeuvreMessageType::throttleMan *arg1 = (RemoteControlManoeuvreMessageType::throttleMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RemoteControlManoeuvreMessageType::throttleMan **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1throttleManoeuvre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::throttleMan *arg2 = (RemoteControlManoeuvreMessageType::throttleMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = *(RemoteControlManoeuvreMessageType::throttleMan **)&jarg2; 
  if (arg1) (arg1)->throttleManoeuvre = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1throttleManoeuvre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::throttleMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (RemoteControlManoeuvreMessageType::throttleMan *)& ((arg1)->throttleManoeuvre);
  *(RemoteControlManoeuvreMessageType::throttleMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1brakeMan_1pct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RemoteControlManoeuvreMessageType::brakeMan *arg1 = (RemoteControlManoeuvreMessageType::brakeMan *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::brakeMan **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->pct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1brakeMan_1pct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RemoteControlManoeuvreMessageType::brakeMan *arg1 = (RemoteControlManoeuvreMessageType::brakeMan *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType::brakeMan **)&jarg1; 
  result = (double_t) ((arg1)->pct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RemoteControlManoeuvreMessageType_1brakeMan(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType::brakeMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreMessageType::brakeMan *)new RemoteControlManoeuvreMessageType::brakeMan();
  *(RemoteControlManoeuvreMessageType::brakeMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RemoteControlManoeuvreMessageType_1brakeMan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RemoteControlManoeuvreMessageType::brakeMan *arg1 = (RemoteControlManoeuvreMessageType::brakeMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RemoteControlManoeuvreMessageType::brakeMan **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1brakeManoeuvre_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::brakeMan *arg2 = (RemoteControlManoeuvreMessageType::brakeMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = *(RemoteControlManoeuvreMessageType::brakeMan **)&jarg2; 
  if (arg1) (arg1)->brakeManoeuvre = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1brakeManoeuvre_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  RemoteControlManoeuvreMessageType::brakeMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (RemoteControlManoeuvreMessageType::brakeMan *)& ((arg1)->brakeManoeuvre);
  *(RemoteControlManoeuvreMessageType::brakeMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1command_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum RemoteControlManoeuvreCommandType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = (enum RemoteControlManoeuvreCommandType)jarg2; 
  if (arg1) (arg1)->command = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1command_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum RemoteControlManoeuvreCommandType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (enum RemoteControlManoeuvreCommandType) ((arg1)->command);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = (enum ISOUnitType)jarg2; 
  if (arg1) (arg1)->steeringUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1steeringUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (enum ISOUnitType) ((arg1)->steeringUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = (enum ISOUnitType)jarg2; 
  if (arg1) (arg1)->speedUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1speedUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (enum ISOUnitType) ((arg1)->speedUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1throttleUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = (enum ISOUnitType)jarg2; 
  if (arg1) (arg1)->throttleUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1throttleUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (enum ISOUnitType) ((arg1)->throttleUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1brakeUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = (enum ISOUnitType)jarg2; 
  if (arg1) (arg1)->brakeUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1brakeUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  enum ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (enum ISOUnitType) ((arg1)->brakeUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isSteeringManoeuvreValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSteeringManoeuvreValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isSteeringManoeuvreValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (bool) ((arg1)->isSteeringManoeuvreValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isSpeedManoeuvreValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSpeedManoeuvreValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isSpeedManoeuvreValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (bool) ((arg1)->isSpeedManoeuvreValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isThrottleManoeuvreValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isThrottleManoeuvreValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isThrottleManoeuvreValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (bool) ((arg1)->isThrottleManoeuvreValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isBrakeManoeuvreValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isBrakeManoeuvreValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlManoeuvreMessageType_1isBrakeManoeuvreValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  result = (bool) ((arg1)->isBrakeManoeuvreValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RemoteControlManoeuvreMessageType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RemoteControlManoeuvreMessageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RemoteControlManoeuvreMessageType *)new RemoteControlManoeuvreMessageType();
  *(RemoteControlManoeuvreMessageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RemoteControlManoeuvreMessageType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HeabMessageDataType_1transmitterID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->transmitterID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HeabMessageDataType_1transmitterID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  result = (uint32_t) ((arg1)->transmitterID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HeabMessageDataType_1dataTimestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  if (arg1) (arg1)->dataTimestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HeabMessageDataType_1dataTimestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  result = (timeval *)& ((arg1)->dataTimestamp);
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HeabMessageDataType_1controlCenterStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  enum ControlCenterStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  arg2 = (enum ControlCenterStatusType)jarg2; 
  if (arg1) (arg1)->controlCenterStatus = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_HeabMessageDataType_1controlCenterStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  enum ControlCenterStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  result = (enum ControlCenterStatusType) ((arg1)->controlCenterStatus);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1HeabMessageDataType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HeabMessageDataType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (HeabMessageDataType *)new HeabMessageDataType();
  *(HeabMessageDataType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1HeabMessageDataType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HeabMessageDataType *arg1 = (HeabMessageDataType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(HeabMessageDataType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DctiMessageDataType_1totalCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->totalCount = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DctiMessageDataType_1totalCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  result = (uint16_t) ((arg1)->totalCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DctiMessageDataType_1counter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->counter = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DctiMessageDataType_1counter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  result = (uint16_t) ((arg1)->counter);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DctiMessageDataType_1transmitterID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->transmitterID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_DctiMessageDataType_1transmitterID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  result = (uint32_t) ((arg1)->transmitterID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1DctiMessageDataType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DctiMessageDataType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DctiMessageDataType *)new DctiMessageDataType();
  *(DctiMessageDataType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1DctiMessageDataType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1executingID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->executingID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1executingID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (uint32_t) ((arg1)->executingID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1dataTimestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  if (arg1) (arg1)->dataTimestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1dataTimestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (timeval *)& ((arg1)->dataTimestamp);
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringActions_1pct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RequestControlActionType::steeringActions *arg1 = (RequestControlActionType::steeringActions *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::steeringActions **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->pct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringActions_1pct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RequestControlActionType::steeringActions *arg1 = (RequestControlActionType::steeringActions *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::steeringActions **)&jarg1; 
  result = (double_t) ((arg1)->pct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringActions_1rad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RequestControlActionType::steeringActions *arg1 = (RequestControlActionType::steeringActions *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::steeringActions **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->rad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringActions_1rad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RequestControlActionType::steeringActions *arg1 = (RequestControlActionType::steeringActions *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::steeringActions **)&jarg1; 
  result = (double_t) ((arg1)->rad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RequestControlActionType_1steeringActions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequestControlActionType::steeringActions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RequestControlActionType::steeringActions *)new RequestControlActionType::steeringActions();
  *(RequestControlActionType::steeringActions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RequestControlActionType_1steeringActions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequestControlActionType::steeringActions *arg1 = (RequestControlActionType::steeringActions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestControlActionType::steeringActions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringAction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  RequestControlActionType::steeringActions *arg2 = (RequestControlActionType::steeringActions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = *(RequestControlActionType::steeringActions **)&jarg2; 
  if (arg1) (arg1)->steeringAction = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringAction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  RequestControlActionType::steeringActions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (RequestControlActionType::steeringActions *)& ((arg1)->steeringAction);
  *(RequestControlActionType::steeringActions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedActions_1pct_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RequestControlActionType::speedActions *arg1 = (RequestControlActionType::speedActions *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::speedActions **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->pct = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedActions_1pct_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RequestControlActionType::speedActions *arg1 = (RequestControlActionType::speedActions *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::speedActions **)&jarg1; 
  result = (double_t) ((arg1)->pct);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedActions_1m_1s_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  RequestControlActionType::speedActions *arg1 = (RequestControlActionType::speedActions *) 0 ;
  double_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::speedActions **)&jarg1; 
  arg2 = (double_t)jarg2; 
  if (arg1) (arg1)->m_s = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedActions_1m_1s_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  RequestControlActionType::speedActions *arg1 = (RequestControlActionType::speedActions *) 0 ;
  double_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType::speedActions **)&jarg1; 
  result = (double_t) ((arg1)->m_s);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RequestControlActionType_1speedActions(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequestControlActionType::speedActions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RequestControlActionType::speedActions *)new RequestControlActionType::speedActions();
  *(RequestControlActionType::speedActions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RequestControlActionType_1speedActions(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequestControlActionType::speedActions *arg1 = (RequestControlActionType::speedActions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestControlActionType::speedActions **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedAction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  RequestControlActionType::speedActions *arg2 = (RequestControlActionType::speedActions *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = *(RequestControlActionType::speedActions **)&jarg2; 
  if (arg1) (arg1)->speedAction = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedAction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  RequestControlActionType::speedActions *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (RequestControlActionType::speedActions *)& ((arg1)->speedAction);
  *(RequestControlActionType::speedActions **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1isSteeringActionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSteeringActionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1isSteeringActionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (bool) ((arg1)->isSteeringActionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1isSpeedActionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSpeedActionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1isSpeedActionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (bool) ((arg1)->isSpeedActionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  enum ISOUnitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = (enum ISOUnitType)jarg2; 
  if (arg1) (arg1)->steeringUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1steeringUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  enum ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (enum ISOUnitType) ((arg1)->steeringUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  enum ISOUnitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = (enum ISOUnitType)jarg2; 
  if (arg1) (arg1)->speedUnit = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RequestControlActionType_1speedUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  enum ISOUnitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  result = (enum ISOUnitType) ((arg1)->speedUnit);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1RequestControlActionType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  RequestControlActionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (RequestControlActionType *)new RequestControlActionType();
  *(RequestControlActionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1RequestControlActionType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(RequestControlActionType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GdrmMessageDataType_1dataCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GdrmMessageDataType *arg1 = (GdrmMessageDataType *) 0 ;
  enum GeneralDataRequestDataCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GdrmMessageDataType **)&jarg1; 
  arg2 = (enum GeneralDataRequestDataCodeType)jarg2; 
  if (arg1) (arg1)->dataCode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GdrmMessageDataType_1dataCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GdrmMessageDataType *arg1 = (GdrmMessageDataType *) 0 ;
  enum GeneralDataRequestDataCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GdrmMessageDataType **)&jarg1; 
  result = (enum GeneralDataRequestDataCodeType) ((arg1)->dataCode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1GdrmMessageDataType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GdrmMessageDataType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GdrmMessageDataType *)new GdrmMessageDataType();
  *(GdrmMessageDataType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1GdrmMessageDataType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GdrmMessageDataType *arg1 = (GdrmMessageDataType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GdrmMessageDataType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1foreignTransmitterID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->foreignTransmitterID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1foreignTransmitterID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (uint32_t) ((arg1)->foreignTransmitterID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1dataTimestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  if (arg1) (arg1)->dataTimestamp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1dataTimestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (timeval *)& ((arg1)->dataTimestamp);
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  ObjectStateType arg2 ;
  ObjectStateType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  argp2 = *(ObjectStateType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null ObjectStateType");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  ObjectStateType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result =  ((arg1)->state);
  *(ObjectStateType **)&jresult = new ObjectStateType((const ObjectStateType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  CartesianPosition *arg2 = (CartesianPosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = *(CartesianPosition **)&jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  CartesianPosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (CartesianPosition *)& ((arg1)->position);
  *(CartesianPosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  SpeedType arg2 ;
  SpeedType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  argp2 = *(SpeedType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SpeedType");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  SpeedType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result =  ((arg1)->speed);
  *(SpeedType **)&jresult = new SpeedType((const SpeedType &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1pitch_1rad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->pitch_rad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1pitch_1rad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (double) ((arg1)->pitch_rad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1roll_1rad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->roll_rad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1roll_1rad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (double) ((arg1)->roll_rad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1isPitchValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPitchValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1isPitchValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (bool) ((arg1)->isPitchValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1isRollValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isRollValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PeerObjectInjectionType_1isRollValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  result = (bool) ((arg1)->isRollValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1PeerObjectInjectionType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  PeerObjectInjectionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (PeerObjectInjectionType *)new PeerObjectInjectionType();
  *(PeerObjectInjectionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1PeerObjectInjectionType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->objectID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (uint32_t) ((arg1)->objectID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  enum ObjectCategoryType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (enum ObjectCategoryType)jarg2; 
  if (arg1) (arg1)->objectType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  enum ObjectCategoryType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (enum ObjectCategoryType) ((arg1)->objectType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1actorType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  enum ActorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (enum ActorType)jarg2; 
  if (arg1) (arg1)->actorType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1actorType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  enum ActorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (enum ActorType) ((arg1)->actorType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1operationMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  enum OperationMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (enum OperationMode)jarg2; 
  if (arg1) (arg1)->operationMode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1operationMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  enum OperationMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (enum OperationMode) ((arg1)->operationMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1mass_1kg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mass_kg = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1mass_1kg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->mass_kg);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectXDimension_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->objectXDimension_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectXDimension_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->objectXDimension_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectYDimension_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->objectYDimension_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectYDimension_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->objectYDimension_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectZDimension_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->objectZDimension_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1objectZDimension_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->objectZDimension_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1positionDisplacementX_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionDisplacementX_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1positionDisplacementX_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->positionDisplacementX_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1positionDisplacementY_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionDisplacementY_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1positionDisplacementY_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->positionDisplacementY_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1positionDisplacementZ_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionDisplacementZ_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1positionDisplacementZ_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->positionDisplacementZ_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isMassValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMassValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isMassValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isMassValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectXDimensionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectXDimensionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectXDimensionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectXDimensionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectYDimensionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectYDimensionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectYDimensionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectYDimensionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectZDimensionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectZDimensionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectZDimensionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectZDimensionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectXDisplacementValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectXDisplacementValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectXDisplacementValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectXDisplacementValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectYDisplacementValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectYDisplacementValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectYDisplacementValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectYDisplacementValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectZDisplacementValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectZDisplacementValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ObjectPropertiesType_1isObjectZDisplacementValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectZDisplacementValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1ObjectPropertiesType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ObjectPropertiesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ObjectPropertiesType *)new ObjectPropertiesType();
  *(ObjectPropertiesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1ObjectPropertiesType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1foreignTransmitterID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->foreignTransmitterID = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1foreignTransmitterID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (uint32_t) ((arg1)->foreignTransmitterID);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  enum ObjectCategoryType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (enum ObjectCategoryType)jarg2; 
  if (arg1) (arg1)->objectType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  enum ObjectCategoryType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (enum ObjectCategoryType) ((arg1)->objectType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1actorType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  enum ActorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (enum ActorType)jarg2; 
  if (arg1) (arg1)->actorType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1actorType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  enum ActorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (enum ActorType) ((arg1)->actorType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1operationMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  enum OperationMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (enum OperationMode)jarg2; 
  if (arg1) (arg1)->operationMode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1operationMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  enum OperationMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (enum OperationMode) ((arg1)->operationMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1mass_1kg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->mass_kg = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1mass_1kg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->mass_kg);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectXDimension_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->objectXDimension_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectXDimension_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->objectXDimension_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectYDimension_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->objectYDimension_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectYDimension_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->objectYDimension_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectZDimension_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->objectZDimension_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1objectZDimension_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->objectZDimension_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1positionDisplacementX_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionDisplacementX_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1positionDisplacementX_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->positionDisplacementX_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1positionDisplacementY_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionDisplacementY_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1positionDisplacementY_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->positionDisplacementY_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1positionDisplacementZ_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->positionDisplacementZ_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1positionDisplacementZ_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (double) ((arg1)->positionDisplacementZ_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isMassValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMassValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isMassValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isMassValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectXDimensionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectXDimensionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectXDimensionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectXDimensionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectYDimensionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectYDimensionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectYDimensionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectYDimensionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectZDimensionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectZDimensionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectZDimensionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectZDimensionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectXDisplacementValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectXDisplacementValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectXDisplacementValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectXDisplacementValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectYDisplacementValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectYDisplacementValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectYDisplacementValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectYDisplacementValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectZDisplacementValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isObjectZDisplacementValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_ForeignObjectPropertiesType_1isObjectZDisplacementValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  result = (bool) ((arg1)->isObjectZDisplacementValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1ForeignObjectPropertiesType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ForeignObjectPropertiesType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ForeignObjectPropertiesType *)new ForeignObjectPropertiesType();
  *(ForeignObjectPropertiesType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1ForeignObjectPropertiesType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_StartMessageType_1startTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  StartMessageType *arg1 = (StartMessageType *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(StartMessageType **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  if (arg1) (arg1)->startTime = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_StartMessageType_1startTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  StartMessageType *arg1 = (StartMessageType *) 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StartMessageType **)&jarg1; 
  result = (timeval *)& ((arg1)->startTime);
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_StartMessageType_1isTimestampValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  StartMessageType *arg1 = (StartMessageType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StartMessageType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTimestampValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_StartMessageType_1isTimestampValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  StartMessageType *arg1 = (StartMessageType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StartMessageType **)&jarg1; 
  result = (bool) ((arg1)->isTimestampValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1StartMessageType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StartMessageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StartMessageType *)new StartMessageType();
  *(StartMessageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1StartMessageType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StartMessageType *arg1 = (StartMessageType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StartMessageType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeneralResponseMessageType_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  GeneralResponseMessageType *arg1 = (GeneralResponseMessageType *) 0 ;
  enum GeneralResponseStatus arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeneralResponseMessageType **)&jarg1; 
  arg2 = (enum GeneralResponseStatus)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeneralResponseMessageType_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  GeneralResponseMessageType *arg1 = (GeneralResponseMessageType *) 0 ;
  enum GeneralResponseStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeneralResponseMessageType **)&jarg1; 
  result = (enum GeneralResponseStatus) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1GeneralResponseMessageType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GeneralResponseMessageType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GeneralResponseMessageType *)new GeneralResponseMessageType();
  *(GeneralResponseMessageType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1GeneralResponseMessageType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeneralResponseMessageType *arg1 = (GeneralResponseMessageType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeneralResponseMessageType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeMONRMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jshort jarg5, jshort jarg6, jshort jarg7, jshort jarg8, jstring jarg9, jlong jarg10, jchar jarg11) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  CartesianPosition arg2 ;
  SpeedType arg3 ;
  AccelerationType arg4 ;
  unsigned char arg5 ;
  unsigned char arg6 ;
  unsigned char arg7 ;
  unsigned char arg8 ;
  char *arg9 = (char *) 0 ;
  size_t arg10 ;
  char arg11 ;
  CartesianPosition const *argp2 ;
  SpeedType const *argp3 ;
  AccelerationType const *argp4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(timeval **)&jarg1; 
  argp2 = *(CartesianPosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CartesianPosition const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SpeedType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SpeedType const");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(AccelerationType **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AccelerationType const");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (unsigned char)jarg5; 
  arg6 = (unsigned char)jarg6; 
  arg7 = (unsigned char)jarg7; 
  arg8 = (unsigned char)jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  arg10 = (size_t)jarg10; 
  arg11 = (char)jarg11; 
  result = (ssize_t)encodeMONRMessage((timeval const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = (jint)result; 
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeMONRMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5, jchar jarg6) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  timeval arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  ObjectMonitorType *arg5 = (ObjectMonitorType *) 0 ;
  char arg6 ;
  timeval const *argp3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  argp3 = *(timeval **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval const");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(uint32_t **)&jarg4; 
  arg5 = *(ObjectMonitorType **)&jarg5; 
  arg6 = (char)jarg6; 
  result = (ssize_t)decodeMONRMessage((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeTRAJMessageHeader(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jchar jarg8) {
  jint jresult = 0 ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  uint32_t arg5 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  char arg8 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = (char)jarg8; 
  result = (ssize_t)encodeTRAJMessageHeader(arg1,arg2,(char const *)arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeTRAJMessagePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jfloat jarg5, jstring jarg6, jlong jarg7, jchar jarg8) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  CartesianPosition arg2 ;
  SpeedType arg3 ;
  AccelerationType arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  char arg8 ;
  CartesianPosition const *argp2 ;
  SpeedType const *argp3 ;
  AccelerationType const *argp4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(timeval **)&jarg1; 
  argp2 = *(CartesianPosition **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CartesianPosition const");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(SpeedType **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null SpeedType const");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(AccelerationType **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null AccelerationType const");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (float)jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = (char)jarg8; 
  result = (ssize_t)encodeTRAJMessagePoint((timeval const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeTRAJMessagePoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jchar jarg3) {
  jint jresult = 0 ;
  TrajectoryWaypointType *arg1 = (TrajectoryWaypointType *) 0 ;
  char *arg2 = (char *) 0 ;
  char arg3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryWaypointType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (char)jarg3; 
  result = (ssize_t)decodeTRAJMessagePoint(arg1,(char const *)arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeTRAJMessageFooter(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jchar jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char arg3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (char)jarg3; 
  result = (ssize_t)encodeTRAJMessageFooter(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeTRAJMessageHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  TrajectoryHeaderType *arg1 = (TrajectoryHeaderType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajectoryHeaderType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeTRAJMessageHeader(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeSTRTMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  StartMessageType *arg1 = (StartMessageType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(StartMessageType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeSTRTMessage((StartMessageType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeSTRTMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jchar jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  timeval *arg3 = (timeval *) 0 ;
  StartMessageType *arg4 = (StartMessageType *) 0 ;
  char arg5 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(timeval **)&jarg3; 
  arg4 = *(StartMessageType **)&jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)decodeSTRTMessage((char const *)arg1,arg2,(timeval const *)arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeOSEMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeOSEMMessage((ObjectSettingsType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeOSEMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jchar jarg5) {
  jint jresult = 0 ;
  ObjectSettingsType *arg1 = (ObjectSettingsType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  uint32_t *arg4 = (uint32_t *) 0 ;
  char arg5 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectSettingsType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = *(uint32_t **)&jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)decodeOSEMMessage(arg1,(char const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeOSTMMessage(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  enum ObjectCommandType arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum ObjectCommandType)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeOSTMMessage(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeOSTMMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  enum ObjectCommandType *arg3 = (enum ObjectCommandType *) 0 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(enum ObjectCommandType **)&jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeOSTMMessage((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeHEABMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jchar jarg5) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  enum ControlCenterStatusType arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char arg5 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  arg2 = (enum ControlCenterStatusType)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)encodeHEABMessage((timeval const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeHEABMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jchar jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  timeval arg3 ;
  HeabMessageDataType *arg4 = (HeabMessageDataType *) 0 ;
  char arg5 ;
  timeval const *argp3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  argp3 = *(timeval **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval const");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(HeabMessageDataType **)&jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)decodeHEABMessage((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeSYPMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jchar jarg5) {
  jint jresult = 0 ;
  timeval arg1 ;
  timeval arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char arg5 ;
  timeval const *argp1 ;
  timeval const *argp2 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  argp1 = *(timeval **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval const");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(timeval **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval const");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)encodeSYPMMessage(arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeMTSPMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeMTSPMessage((timeval const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeTRCMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jchar jarg8) {
  jint jresult = 0 ;
  uint16_t *arg1 = (uint16_t *) 0 ;
  enum TriggerType_t *arg2 = (enum TriggerType_t *) 0 ;
  enum TriggerTypeParameter_t *arg3 = (enum TriggerTypeParameter_t *) 0 ;
  enum TriggerTypeParameter_t *arg4 = (enum TriggerTypeParameter_t *) 0 ;
  enum TriggerTypeParameter_t *arg5 = (enum TriggerTypeParameter_t *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  char arg8 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint16_t **)&jarg1; 
  arg2 = *(enum TriggerType_t **)&jarg2; 
  arg3 = *(enum TriggerTypeParameter_t **)&jarg3; 
  arg4 = *(enum TriggerTypeParameter_t **)&jarg4; 
  arg5 = *(enum TriggerTypeParameter_t **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = (char)jarg8; 
  result = (ssize_t)encodeTRCMMessage((unsigned short const *)arg1,(enum TriggerType_t const *)arg2,(enum TriggerTypeParameter_t const *)arg3,(enum TriggerTypeParameter_t const *)arg4,(enum TriggerTypeParameter_t const *)arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeACCMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jstring jarg6, jlong jarg7, jchar jarg8) {
  jint jresult = 0 ;
  uint16_t *arg1 = (uint16_t *) 0 ;
  enum ActionType_t *arg2 = (enum ActionType_t *) 0 ;
  enum ActionTypeParameter_t *arg3 = (enum ActionTypeParameter_t *) 0 ;
  enum ActionTypeParameter_t *arg4 = (enum ActionTypeParameter_t *) 0 ;
  enum ActionTypeParameter_t *arg5 = (enum ActionTypeParameter_t *) 0 ;
  char *arg6 = (char *) 0 ;
  size_t arg7 ;
  char arg8 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint16_t **)&jarg1; 
  arg2 = *(enum ActionType_t **)&jarg2; 
  arg3 = *(enum ActionTypeParameter_t **)&jarg3; 
  arg4 = *(enum ActionTypeParameter_t **)&jarg4; 
  arg5 = *(enum ActionTypeParameter_t **)&jarg5; 
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = (size_t)jarg7; 
  arg8 = (char)jarg8; 
  result = (ssize_t)encodeACCMMessage((unsigned short const *)arg1,(enum ActionType_t const *)arg2,(enum ActionTypeParameter_t const *)arg3,(enum ActionTypeParameter_t const *)arg4,(enum ActionTypeParameter_t const *)arg5,arg6,arg7,arg8);
  jresult = (jint)result; 
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeEXACMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jstring jarg3, jlong jarg4, jchar jarg5) {
  jint jresult = 0 ;
  uint16_t *arg1 = (uint16_t *) 0 ;
  timeval *arg2 = (timeval *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char arg5 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(uint16_t **)&jarg1; 
  arg2 = *(timeval **)&jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (size_t)jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)encodeEXACMessage((unsigned short const *)arg1,(timeval const *)arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeRCMMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeRCMMMessage((RemoteControlManoeuvreMessageType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeRCMMMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jchar jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  RemoteControlManoeuvreMessageType *arg3 = (RemoteControlManoeuvreMessageType *) 0 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(RemoteControlManoeuvreMessageType **)&jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeRCMMMessage((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeINSUPMessage(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  enum SupervisorCommandType arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (enum SupervisorCommandType)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeINSUPMessage(arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeDCTIMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  DctiMessageDataType *arg1 = (DctiMessageDataType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DctiMessageDataType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeDCTIMessage((DctiMessageDataType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeDCTIMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jchar jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  DctiMessageDataType *arg3 = (DctiMessageDataType *) 0 ;
  char arg4 ;
  enum ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(DctiMessageDataType **)&jarg3; 
  arg4 = (char)jarg4; 
  result = (enum ISOMessageReturnValue)decodeDCTIMessage((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_getISOMessageType(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jchar jarg3) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char arg3 ;
  enum ISOMessageID result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = (char)jarg3; 
  result = (enum ISOMessageID)getISOMessageType((char const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_setISOCRCVerification(JNIEnv *jenv, jclass jcls, jbyte jarg1) {
  int8_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int8_t)jarg1; 
  setISOCRCVerification(arg1);
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_setTransmitterID(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  uint8_t arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  setTransmitterID(arg1);
}


SWIGEXPORT jshort JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_getTransmitterID(JNIEnv *jenv, jclass jcls) {
  jshort jresult = 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint8_t)getTransmitterID();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodePODIMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  PeerObjectInjectionType *arg1 = (PeerObjectInjectionType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(PeerObjectInjectionType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodePODIMessage((PeerObjectInjectionType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodePODIMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jchar jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  timeval arg3 ;
  PeerObjectInjectionType *arg4 = (PeerObjectInjectionType *) 0 ;
  char arg5 ;
  timeval const *argp3 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  argp3 = *(timeval **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval const");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(PeerObjectInjectionType **)&jarg4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)decodePODIMessage((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeOPROMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeOPROMessage((ObjectPropertiesType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeOPROMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  ObjectPropertiesType *arg1 = (ObjectPropertiesType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ObjectPropertiesType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeOPROMessage(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeFOPRMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeFOPRMessage((ForeignObjectPropertiesType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeFOPRMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  ForeignObjectPropertiesType *arg1 = (ForeignObjectPropertiesType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ForeignObjectPropertiesType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeFOPRMessage(arg1,(char const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeRDCAMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  RequestControlActionType *arg1 = (RequestControlActionType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RequestControlActionType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeRDCAMessage((RequestControlActionType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeRDCAMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4, jobject jarg4_, jchar jarg5) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  RequestControlActionType *arg2 = (RequestControlActionType *) 0 ;
  size_t arg3 ;
  timeval arg4 ;
  char arg5 ;
  timeval const *argp4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(RequestControlActionType **)&jarg2; 
  arg3 = (size_t)jarg3; 
  argp4 = *(timeval **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null timeval const");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (char)jarg5; 
  result = (ssize_t)decodeRDCAMessage((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeGDRMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  GdrmMessageDataType *arg1 = (GdrmMessageDataType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GdrmMessageDataType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeGDRMMessage((GdrmMessageDataType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeGDRMMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jchar jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  GdrmMessageDataType *arg3 = (GdrmMessageDataType *) 0 ;
  char arg4 ;
  enum ISOMessageReturnValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(GdrmMessageDataType **)&jarg3; 
  arg4 = (char)jarg4; 
  result = (enum ISOMessageReturnValue)decodeGDRMMessage((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeGREMMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jchar jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  GeneralResponseMessageType *arg3 = (GeneralResponseMessageType *) 0 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(GeneralResponseMessageType **)&jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeGREMMessage((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeGREMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  GeneralResponseMessageType *arg1 = (GeneralResponseMessageType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeneralResponseMessageType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeGREMMessage((GeneralResponseMessageType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_encodeDCMMMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jchar jarg4) {
  jint jresult = 0 ;
  RemoteControlManoeuvreMessageType *arg1 = (RemoteControlManoeuvreMessageType *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(RemoteControlManoeuvreMessageType **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)encodeDCMMMessage((RemoteControlManoeuvreMessageType const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_decodeDCMMMessage(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jobject jarg3_, jchar jarg4) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  RemoteControlManoeuvreMessageType *arg3 = (RemoteControlManoeuvreMessageType *) 0 ;
  char arg4 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (size_t)jarg2; 
  arg3 = *(RemoteControlManoeuvreMessageType **)&jarg3; 
  arg4 = (char)jarg4; 
  result = (ssize_t)decodeDCMMMessage((char const *)arg1,arg2,arg3,arg4);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_timeval_1tv_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  timeval *arg1 = (timeval *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->tv_sec = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_timeval_1tv_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  result = (long) ((arg1)->tv_sec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_timeval_1tv_1usec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  timeval *arg1 = (timeval *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->tv_usec = arg2;
}


SWIGEXPORT jint JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_timeval_1tv_1usec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  result = (long) ((arg1)->tv_usec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1timeval(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (timeval *)new timeval();
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1timeval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  timeval *arg1 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(timeval **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1xCoord_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xCoord_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1xCoord_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  result = (double) ((arg1)->xCoord_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1yCoord_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yCoord_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1yCoord_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  result = (double) ((arg1)->yCoord_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1zCoord_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zCoord_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1zCoord_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  result = (double) ((arg1)->zCoord_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1heading_1rad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->heading_rad = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1heading_1rad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  result = (double) ((arg1)->heading_rad);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1isPositionValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPositionValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1isPositionValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  result = (bool) ((arg1)->isPositionValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1isHeadingValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isHeadingValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_CartesianPosition_1isHeadingValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CartesianPosition **)&jarg1; 
  result = (bool) ((arg1)->isHeadingValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1CartesianPosition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CartesianPosition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CartesianPosition *)new CartesianPosition();
  *(CartesianPosition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1CartesianPosition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CartesianPosition *arg1 = (CartesianPosition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CartesianPosition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1latitude_1deg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->latitude_deg = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1latitude_1deg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  result = (double) ((arg1)->latitude_deg);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1longitude_1deg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->longitude_deg = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1longitude_1deg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  result = (double) ((arg1)->longitude_deg);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1altitude_1m_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->altitude_m = arg2;
}


SWIGEXPORT jdouble JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1altitude_1m_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  result = (double) ((arg1)->altitude_m);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1isLatitudeValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isLatitudeValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1isLatitudeValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  result = (bool) ((arg1)->isLatitudeValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1isLongitudeValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isLongitudeValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1isLongitudeValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  result = (bool) ((arg1)->isLongitudeValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1isAltitudeValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAltitudeValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_GeographicPositionType_1isAltitudeValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(GeographicPositionType **)&jarg1; 
  result = (bool) ((arg1)->isAltitudeValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_new_1GeographicPositionType(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  GeographicPositionType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (GeographicPositionType *)new GeographicPositionType();
  *(GeographicPositionType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_delete_1GeographicPositionType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  GeographicPositionType *arg1 = (GeographicPositionType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(GeographicPositionType **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Unknown_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Unknown **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Off_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Off **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Init_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Init **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Armed_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Armed **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Disarmed_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Disarmed **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Running_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Running **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PostRun_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::PostRun **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_RemoteControlled_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::RemoteControlled **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Aborting_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Aborting **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PreArming_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::PreArming **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_PreRunning_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::PreRunning **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Socket_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BasicSocket **)&baseptr = *(Socket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_Server_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BasicSocket **)&baseptr = *(Server **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_TCPServer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Server **)&baseptr = *(TCPServer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_asta_isoObject_isoObject_1wrapJNI_UDPServer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Server **)&baseptr = *(UDPServer **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

