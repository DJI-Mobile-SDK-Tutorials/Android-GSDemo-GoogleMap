/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.asta.isoObject;

public final class TriggerType_t {
  public final static TriggerType_t TRIGGER_UNDEFINED = new TriggerType_t("TRIGGER_UNDEFINED", isoObject_wrapJNI.TRIGGER_UNDEFINED_get());
  public final static TriggerType_t TRIGGER_TYPE_1 = new TriggerType_t("TRIGGER_TYPE_1", isoObject_wrapJNI.TRIGGER_TYPE_1_get());
  public final static TriggerType_t TRIGGER_SPEED = new TriggerType_t("TRIGGER_SPEED", isoObject_wrapJNI.TRIGGER_SPEED_get());
  public final static TriggerType_t TRIGGER_DISTANCE = new TriggerType_t("TRIGGER_DISTANCE", isoObject_wrapJNI.TRIGGER_DISTANCE_get());
  public final static TriggerType_t TRIGGER_ACCELERATION = new TriggerType_t("TRIGGER_ACCELERATION", isoObject_wrapJNI.TRIGGER_ACCELERATION_get());
  public final static TriggerType_t TRIGGER_LANE_CHANGED = new TriggerType_t("TRIGGER_LANE_CHANGED", isoObject_wrapJNI.TRIGGER_LANE_CHANGED_get());
  public final static TriggerType_t TRIGGER_LANE_OFFSET = new TriggerType_t("TRIGGER_LANE_OFFSET", isoObject_wrapJNI.TRIGGER_LANE_OFFSET_get());
  public final static TriggerType_t TRIGGER_POSITION_REACHED = new TriggerType_t("TRIGGER_POSITION_REACHED", isoObject_wrapJNI.TRIGGER_POSITION_REACHED_get());
  public final static TriggerType_t TRIGGER_POSITION_LEFT = new TriggerType_t("TRIGGER_POSITION_LEFT", isoObject_wrapJNI.TRIGGER_POSITION_LEFT_get());
  public final static TriggerType_t TRIGGER_POSITION_OFFSET = new TriggerType_t("TRIGGER_POSITION_OFFSET", isoObject_wrapJNI.TRIGGER_POSITION_OFFSET_get());
  public final static TriggerType_t TRIGGER_STEERING_ANGLE = new TriggerType_t("TRIGGER_STEERING_ANGLE", isoObject_wrapJNI.TRIGGER_STEERING_ANGLE_get());
  public final static TriggerType_t TRIGGER_THROTTLE_VALUE = new TriggerType_t("TRIGGER_THROTTLE_VALUE", isoObject_wrapJNI.TRIGGER_THROTTLE_VALUE_get());
  public final static TriggerType_t TRIGGER_BRAKE = new TriggerType_t("TRIGGER_BRAKE", isoObject_wrapJNI.TRIGGER_BRAKE_get());
  public final static TriggerType_t TRIGGER_ACTIVE_TRAJECTORY = new TriggerType_t("TRIGGER_ACTIVE_TRAJECTORY", isoObject_wrapJNI.TRIGGER_ACTIVE_TRAJECTORY_get());
  public final static TriggerType_t TRIGGER_OTHER_OBJECT_FEATURE = new TriggerType_t("TRIGGER_OTHER_OBJECT_FEATURE", isoObject_wrapJNI.TRIGGER_OTHER_OBJECT_FEATURE_get());
  public final static TriggerType_t TRIGGER_INFRASTRUCTURE = new TriggerType_t("TRIGGER_INFRASTRUCTURE", isoObject_wrapJNI.TRIGGER_INFRASTRUCTURE_get());
  public final static TriggerType_t TRIGGER_TEST_SCENARIO_EVENT = new TriggerType_t("TRIGGER_TEST_SCENARIO_EVENT", isoObject_wrapJNI.TRIGGER_TEST_SCENARIO_EVENT_get());
  public final static TriggerType_t TRIGGER_MISC_DIGITAL_INPUT = new TriggerType_t("TRIGGER_MISC_DIGITAL_INPUT", isoObject_wrapJNI.TRIGGER_MISC_DIGITAL_INPUT_get());
  public final static TriggerType_t TRIGGER_MISC_ANALOG_INPUT = new TriggerType_t("TRIGGER_MISC_ANALOG_INPUT", isoObject_wrapJNI.TRIGGER_MISC_ANALOG_INPUT_get());
  public final static TriggerType_t TRIGGER_TIMER_EVENT_OCCURRED = new TriggerType_t("TRIGGER_TIMER_EVENT_OCCURRED", isoObject_wrapJNI.TRIGGER_TIMER_EVENT_OCCURRED_get());
  public final static TriggerType_t TRIGGER_MODE_CHANGED = new TriggerType_t("TRIGGER_MODE_CHANGED", isoObject_wrapJNI.TRIGGER_MODE_CHANGED_get());
  public final static TriggerType_t TRIGGER_UNAVAILABLE = new TriggerType_t("TRIGGER_UNAVAILABLE", isoObject_wrapJNI.TRIGGER_UNAVAILABLE_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static TriggerType_t swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + TriggerType_t.class + " with value " + swigValue);
  }

  private TriggerType_t(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private TriggerType_t(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private TriggerType_t(String swigName, TriggerType_t swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static TriggerType_t[] swigValues = { TRIGGER_UNDEFINED, TRIGGER_TYPE_1, TRIGGER_SPEED, TRIGGER_DISTANCE, TRIGGER_ACCELERATION, TRIGGER_LANE_CHANGED, TRIGGER_LANE_OFFSET, TRIGGER_POSITION_REACHED, TRIGGER_POSITION_LEFT, TRIGGER_POSITION_OFFSET, TRIGGER_STEERING_ANGLE, TRIGGER_THROTTLE_VALUE, TRIGGER_BRAKE, TRIGGER_ACTIVE_TRAJECTORY, TRIGGER_OTHER_OBJECT_FEATURE, TRIGGER_INFRASTRUCTURE, TRIGGER_TEST_SCENARIO_EVENT, TRIGGER_MISC_DIGITAL_INPUT, TRIGGER_MISC_ANALOG_INPUT, TRIGGER_TIMER_EVENT_OCCURRED, TRIGGER_MODE_CHANGED, TRIGGER_UNAVAILABLE };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

