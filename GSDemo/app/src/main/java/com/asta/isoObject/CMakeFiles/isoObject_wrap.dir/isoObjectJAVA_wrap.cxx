/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include "trajDecoder.hpp"
#include "iso22133state.hpp"
#include "iso22133object.hpp"
#include "socket.hpp"
#include "server.hpp"



static uint32_t *new_uint32ptr() { 
  return new uint32_t(); 
}

static uint32_t *copy_uint32ptr(uint32_t value) { 
  return new uint32_t(value); 
}

static void delete_uint32ptr(uint32_t *obj) { 
  if (obj) delete obj; 
}

static void uint32ptr_assign(uint32_t *obj, uint32_t value) {
  *obj = value;
}

static uint32_t uint32ptr_value(uint32_t *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TrajDecoder_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  TrajDecoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (TrajDecoder *)new TrajDecoder(arg1);
  *(TrajDecoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TrajDecoder_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TrajDecoder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TrajDecoder *)new TrajDecoder();
  *(TrajDecoder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_TrajDecoder_1DecodeTRAJ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  std::vector< char > *arg2 = 0 ;
  ssize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > & reference is null");
    return 0;
  } 
  result = (ssize_t)(arg1)->DecodeTRAJ(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_isoObject_1wrapJNI_TrajDecoder_1ExpectingTrajPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  result = (bool)((TrajDecoder const *)arg1)->ExpectingTrajPoints();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TrajDecoder_1getTrajHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  TrajectoryHeaderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  result = ((TrajDecoder const *)arg1)->getTrajHeader();
  *(TrajectoryHeaderType **)&jresult = new TrajectoryHeaderType((const TrajectoryHeaderType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TrajDecoder_1getTraj(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  SwigValueWrapper< std::vector< TrajectoryWaypointType > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TrajDecoder **)&jarg1; 
  result = ((TrajDecoder const *)arg1)->getTraj();
  *(std::vector< TrajectoryWaypointType > **)&jresult = new std::vector< TrajectoryWaypointType >((const std::vector< TrajectoryWaypointType > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1TrajDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TrajDecoder *arg1 = (TrajDecoder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TrajDecoder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1UNKNOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_UNKNOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_INIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1ARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_ARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1DISARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_DISARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_RUNNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1POSTRUN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_POSTRUN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1REMOTE_1CONTROLLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_REMOTE_CONTROLLED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1ABORTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_ABORTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1PRE_1ARMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_PRE_ARMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_ISO_1OBJECT_1STATE_1PRE_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::ObjectStateID)ISO22133::ISO_OBJECT_STATE_PRE_RUNNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_descriptions_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< ISO22133::Events::EventType,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< ISO22133::Events::EventType,std::string > *)&ISO22133::Events::descriptions;
  *(std::map< ISO22133::Events::EventType,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_stateNames_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< ISO22133::ObjectStateID,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< ISO22133::ObjectStateID,std::string > *)&ISO22133::stateNames;
  *(std::map< ISO22133::ObjectStateID,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1State(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::State **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_State_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::State **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::State const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_State_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::State **)&jarg1; 
  result = ((ISO22133::State const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_State_1handleEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  ISO22133::State *arg1 = (ISO22133::State *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  ISO22133::Events::EventType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::State **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  arg3 = (ISO22133::Events::EventType)jarg3; 
  (arg1)->handleEvent(*arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Unknown_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Unknown *arg1 = (ISO22133::Unknown *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Unknown **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Unknown const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Unknown(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Unknown *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Unknown *)new ISO22133::Unknown();
  *(ISO22133::Unknown **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Unknown(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Unknown *arg1 = (ISO22133::Unknown *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Unknown **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Off_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Off *arg1 = (ISO22133::Off *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Off **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Off const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Off(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Off *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Off *)new ISO22133::Off();
  *(ISO22133::Off **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Off(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Off *arg1 = (ISO22133::Off *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Off **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Init_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Init *arg1 = (ISO22133::Init *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Init **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Init const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Init_1onExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::Init *arg1 = (ISO22133::Init *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Init **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onExit(*arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Init(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Init *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Init *)new ISO22133::Init();
  *(ISO22133::Init **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Init(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Init *arg1 = (ISO22133::Init *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Init **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Armed_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Armed *arg1 = (ISO22133::Armed *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Armed **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Armed const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Armed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Armed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Armed *)new ISO22133::Armed();
  *(ISO22133::Armed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Armed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Armed *arg1 = (ISO22133::Armed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Armed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Disarmed_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Disarmed const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Disarmed_1onEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onEnter(*arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Disarmed_1onExit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onExit(*arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Disarmed(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Disarmed *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Disarmed *)new ISO22133::Disarmed();
  *(ISO22133::Disarmed **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Disarmed(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Disarmed *arg1 = (ISO22133::Disarmed *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Disarmed **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Running_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Running *arg1 = (ISO22133::Running *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Running **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Running const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Running(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Running *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Running *)new ISO22133::Running();
  *(ISO22133::Running **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Running(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Running *arg1 = (ISO22133::Running *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Running **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_PostRun_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::PostRun *arg1 = (ISO22133::PostRun *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::PostRun **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::PostRun const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1PostRun(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::PostRun *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::PostRun *)new ISO22133::PostRun();
  *(ISO22133::PostRun **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1PostRun(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::PostRun *arg1 = (ISO22133::PostRun *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::PostRun **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_RemoteControlled_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::RemoteControlled *arg1 = (ISO22133::RemoteControlled *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::RemoteControlled **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::RemoteControlled const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1RemoteControlled(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::RemoteControlled *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::RemoteControlled *)new ISO22133::RemoteControlled();
  *(ISO22133::RemoteControlled **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1RemoteControlled(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::RemoteControlled *arg1 = (ISO22133::RemoteControlled *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::RemoteControlled **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Aborting_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Aborting *arg1 = (ISO22133::Aborting *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Aborting **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::Aborting const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Aborting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Aborting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Aborting *)new ISO22133::Aborting();
  *(ISO22133::Aborting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Aborting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Aborting *arg1 = (ISO22133::Aborting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Aborting **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_PreArming_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::PreArming *arg1 = (ISO22133::PreArming *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::PreArming **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::PreArming const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_PreArming_1onEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::PreArming *arg1 = (ISO22133::PreArming *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::PreArming **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onEnter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1PreArming(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::PreArming *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::PreArming *)new ISO22133::PreArming();
  *(ISO22133::PreArming **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1PreArming(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::PreArming *arg1 = (ISO22133::PreArming *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::PreArming **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_PreRunning_1getStateID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::PreRunning *arg1 = (ISO22133::PreRunning *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::PreRunning **)&jarg1; 
  result = (ISO22133::ObjectStateID)((ISO22133::PreRunning const *)arg1)->getStateID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_PreRunning_1onEnter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ISO22133::PreRunning *arg1 = (ISO22133::PreRunning *) 0 ;
  ISO22133::TestObject *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::PreRunning **)&jarg1; 
  arg2 = *(ISO22133::TestObject **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::TestObject & reference is null");
    return ;
  } 
  (arg1)->onEnter(*arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1PreRunning(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::PreRunning *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::PreRunning *)new ISO22133::PreRunning();
  *(ISO22133::PreRunning **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1PreRunning(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::PreRunning *arg1 = (ISO22133::PreRunning *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::PreRunning **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Transition_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  arg2 = (ISO22133::ObjectStateID)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Transition_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  result = (ISO22133::ObjectStateID) ((arg1)->source);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Transition_1event_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::Events::EventType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  arg2 = (ISO22133::Events::EventType)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Transition_1event_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::Events::EventType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  result = (ISO22133::Events::EventType) ((arg1)->event);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Transition_1target_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  arg2 = (ISO22133::ObjectStateID)jarg2; 
  if (arg1) (arg1)->target = arg2;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_Transition_1target_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  ISO22133::ObjectStateID result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  result = (ISO22133::ObjectStateID) ((arg1)->target);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Transition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::Transition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::Transition *)new ISO22133::Transition();
  *(ISO22133::Transition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Transition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::Transition *arg1 = (ISO22133::Transition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::Transition **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_isoObject_1wrapJNI_LessThan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ISO22133::Transition *arg1 = 0 ;
  ISO22133::Transition *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ISO22133::Transition **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::Transition const & reference is null");
    return 0;
  } 
  arg2 = *(ISO22133::Transition **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "ISO22133::Transition const & reference is null");
    return 0;
  } 
  result = (bool)ISO22133::operator <((ISO22133::Transition const &)*arg1,(ISO22133::Transition const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_language_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::set< ISO22133::Transition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::set< ISO22133::Transition > *)&ISO22133::language;
  *(std::set< ISO22133::Transition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TestObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  ISO22133::TestObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (ISO22133::TestObject *)new ISO22133::TestObject((std::string const &)*arg1);
  *(ISO22133::TestObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TestObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ISO22133::TestObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ISO22133::TestObject *)new ISO22133::TestObject();
  *(ISO22133::TestObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1TestObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_TestObject_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  (arg1)->disconnect();
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_TestObject_1getCurrentStateName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getCurrentStateName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_TestObject_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  CartesianPosition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getPosition();
  *(CartesianPosition **)&jresult = new CartesianPosition((const CartesianPosition &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  SpeedType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getSpeed();
  *(SpeedType **)&jresult = new SpeedType((const SpeedType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  AccelerationType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getAcceleration();
  *(AccelerationType **)&jresult = new AccelerationType((const AccelerationType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getDriveDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  DriveDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getDriveDirection();
  *(DriveDirectionType **)&jresult = new DriveDirectionType((const DriveDirectionType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getTrajectoryHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  TrajectoryHeaderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getTrajectoryHeader();
  *(TrajectoryHeaderType **)&jresult = new TrajectoryHeaderType((const TrajectoryHeaderType &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getTrajectory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  SwigValueWrapper< std::vector< TrajectoryWaypointType > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getTrajectory();
  *(std::vector< TrajectoryWaypointType > **)&jresult = new std::vector< TrajectoryWaypointType >((const std::vector< TrajectoryWaypointType > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  GeographicPositionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getOrigin();
  *(GeographicPositionType **)&jresult = new GeographicPositionType((const GeographicPositionType &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_TestObject_1getLocalIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = ((ISO22133::TestObject const *)arg1)->getLocalIP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TestObject_1getTransmitterID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  ISO22133::TestObject *arg1 = (ISO22133::TestObject *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ISO22133::TestObject **)&jarg1; 
  result = (uint32_t)((ISO22133::TestObject const *)arg1)->getTransmitterID();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_BasicSocket_1STREAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  BasicSocket::SocketType result;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket::SocketType)BasicSocket::STREAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_BasicSocket_1DATAGRAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  BasicSocket::SocketType result;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket::SocketType)BasicSocket::DATAGRAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1HostInfo_1address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Address *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->address = *arg2;
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_BasicSocket_1HostInfo_1address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Address *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  result = (BasicSocket::Address *) & ((arg1)->address);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1HostInfo_1port_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Port arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  arg2 = (BasicSocket::Port)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_BasicSocket_1HostInfo_1port_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  BasicSocket::Port result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  result = (BasicSocket::Port) ((arg1)->port);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1HostInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BasicSocket::HostInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket::HostInfo *)new BasicSocket::HostInfo();
  *(BasicSocket::HostInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1BasicSocket_1HostInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BasicSocket::HostInfo *arg1 = (BasicSocket::HostInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BasicSocket::HostInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (BasicSocket *)new BasicSocket();
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  bool arg2 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BasicSocket *)new BasicSocket(arg1,arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  result = (BasicSocket *)new BasicSocket(arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (BasicSocket *)new BasicSocket(arg1,arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (BasicSocket *)new BasicSocket(arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1BasicSocket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BasicSocket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1BasicSocket_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BasicSocket *arg1 = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket const & reference is null");
    return 0;
  } 
  result = (BasicSocket *)new BasicSocket((BasicSocket const &)*arg1);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_BasicSocket_1SocketEqual_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket *arg2 = 0 ;
  BasicSocket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = *(BasicSocket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket const & reference is null");
    return 0;
  } 
  result = (BasicSocket *) &(arg1)->operator =((BasicSocket const &)*arg2);
  *(BasicSocket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setDebug_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDebug(arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setDebug_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setDebug();
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setReuseAddr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReuseAddr(arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setReuseAddr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setReuseAddr();
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setKeepAlive_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setKeepAlive(arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setKeepAlive_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setKeepAlive();
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setLinger_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLinger(arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setLinger_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setLinger();
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setLingerSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLingerSeconds(arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setBlocking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setBlocking(arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1setBlocking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->setBlocking();
}


SWIGEXPORT jboolean JNICALL Java_isoObject_1wrapJNI_BasicSocket_1getBlocking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (bool)((BasicSocket const *)arg1)->getBlocking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_BasicSocket_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::SocketType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (BasicSocket::SocketType)((BasicSocket const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_BasicSocket_1getRemoteIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = ((BasicSocket const *)arg1)->getRemoteIP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_isoObject_1wrapJNI_BasicSocket_1getLocalIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Address result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = ((BasicSocket const *)arg1)->getLocalIP();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_BasicSocket_1getRemotePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Port result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (BasicSocket::Port)((BasicSocket const *)arg1)->getRemotePort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_BasicSocket_1getLocalPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::Port result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  result = (BasicSocket::Port)((BasicSocket const *)arg1)->getLocalPort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_BasicSocket_1open(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  BasicSocket *arg1 = (BasicSocket *) 0 ;
  BasicSocket::SocketType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BasicSocket **)&jarg1; 
  arg2 = (BasicSocket::SocketType)jarg2; 
  (arg1)->open(arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Socket_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Socket *arg1 = 0 ;
  Socket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Socket const & reference is null");
    return 0;
  } 
  result = (Socket *)new Socket((Socket const &)*arg1);
  *(Socket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Socket_1recv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Socket *arg1 = (Socket *) 0 ;
  SwigValueWrapper< std::vector< char > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1; 
  result = (arg1)->recv();
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Socket_1send_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Socket *arg1 = (Socket *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  (arg1)->send((std::vector< char > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_Socket_1send_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Socket *arg1 = (Socket *) 0 ;
  std::vector< char > *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Socket **)&jarg1; 
  arg2 = *(std::vector< char > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< char > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->send((std::vector< char > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Socket(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Socket *arg1 = (Socket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Socket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Server_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  bool arg2 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (Server *)new Server(arg1,arg2);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Server_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  result = (Server *)new Server(arg1);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Server_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  BasicSocket::Address *arg2 = 0 ;
  BasicSocket::Port arg3 ;
  bool arg4 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (BasicSocket::Port)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (Server *)new Server(arg1,(BasicSocket::Address const &)*arg2,arg3,arg4);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1Server_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  BasicSocket::SocketType arg1 ;
  BasicSocket::Address *arg2 = 0 ;
  BasicSocket::Port arg3 ;
  Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (BasicSocket::SocketType)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (BasicSocket::Port)jarg3; 
  result = (Server *)new Server(arg1,(BasicSocket::Address const &)*arg2,arg3);
  *(Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Server *arg1 = (Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Server **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (TCPServer *)new TCPServer(arg1);
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (TCPServer *)new TCPServer();
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  bool arg3 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (TCPServer *)new TCPServer((BasicSocket::Address const &)*arg1,arg2,arg3);
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1TCPServer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  TCPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  result = (TCPServer *)new TCPServer((BasicSocket::Address const &)*arg1,arg2);
  *(TCPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TCPServer_1await_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TCPServer *arg1 = (TCPServer *) 0 ;
  SwigValueWrapper< Socket > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TCPServer **)&jarg1; 
  result = (arg1)->await();
  *(Socket **)&jresult = new Socket((const Socket &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TCPServer_1await_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  TCPServer *arg1 = (TCPServer *) 0 ;
  BasicSocket::Address *arg2 = 0 ;
  BasicSocket::Port arg3 ;
  SwigValueWrapper< Socket > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TCPServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  BasicSocket::Address arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (BasicSocket::Port)jarg3; 
  result = (arg1)->await((BasicSocket::Address const &)*arg2,arg3);
  *(Socket **)&jresult = new Socket((const Socket &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1TCPServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TCPServer *arg1 = (TCPServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TCPServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  bool arg1 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = (UDPServer *)new UDPServer(arg1);
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (UDPServer *)new UDPServer();
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  bool arg3 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (UDPServer *)new UDPServer((BasicSocket::Address const &)*arg1,arg2,arg3);
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1UDPServer_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  BasicSocket::Address *arg1 = 0 ;
  BasicSocket::Port arg2 ;
  UDPServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  BasicSocket::Address arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (BasicSocket::Port)jarg2; 
  result = (UDPServer *)new UDPServer((BasicSocket::Address const &)*arg1,arg2);
  *(UDPServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_UDPServer_1bind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  BasicSocket::HostInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(UDPServer **)&jarg1; 
  arg2 = *(BasicSocket::HostInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BasicSocket::HostInfo const & reference is null");
    return ;
  } 
  (arg1)->bind((BasicSocket::HostInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_UDPServer_1recvfrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  UDPServer *arg1 = (UDPServer *) 0 ;
  SwigValueWrapper< std::pair< std::vector< char >,BasicSocket::HostInfo > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UDPServer **)&jarg1; 
  result = (arg1)->recvfrom();
  *(std::pair< std::vector< char >,BasicSocket::HostInfo > **)&jresult = new std::pair< std::vector< char >,BasicSocket::HostInfo >((const std::pair< std::vector< char >,BasicSocket::HostInfo > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_UDPServer_1sendto_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  std::pair< std::vector< char > const,BasicSocket::HostInfo const > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UDPServer **)&jarg1; 
  arg2 = *(std::pair< std::vector< char > const,BasicSocket::HostInfo const > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< char > const,BasicSocket::HostInfo const > const & reference is null");
    return ;
  } 
  (arg1)->sendto((std::pair< std::vector< char > const,BasicSocket::HostInfo const > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_UDPServer_1sendto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  std::pair< std::vector< char > const,BasicSocket::HostInfo const > *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(UDPServer **)&jarg1; 
  arg2 = *(std::pair< std::vector< char > const,BasicSocket::HostInfo const > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< std::vector< char > const,BasicSocket::HostInfo const > const & reference is null");
    return ;
  } 
  arg3 = (size_t)jarg3; 
  (arg1)->sendto((std::pair< std::vector< char > const,BasicSocket::HostInfo const > const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1UDPServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  UDPServer *arg1 = (UDPServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(UDPServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_timeval_1tv_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  timeval *arg1 = (timeval *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->tv_sec = arg2;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_timeval_1tv_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  result = (long) ((arg1)->tv_sec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_timeval_1tv_1usec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  timeval *arg1 = (timeval *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->tv_usec = arg2;
}


SWIGEXPORT jint JNICALL Java_isoObject_1wrapJNI_timeval_1tv_1usec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  timeval *arg1 = (timeval *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(timeval **)&jarg1; 
  result = (long) ((arg1)->tv_usec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1timeval(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  timeval *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (timeval *)new timeval();
  *(timeval **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1timeval(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  timeval *arg1 = (timeval *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(timeval **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_new_1uint32ptr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (uint32_t *)new_uint32ptr();
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_copy_1uint32ptr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t arg1 ;
  uint32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint32_t)jarg1; 
  result = (uint32_t *)copy_uint32ptr(arg1);
  *(uint32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_delete_1uint32ptr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  uint32_t *arg1 = (uint32_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_t **)&jarg1; 
  delete_uint32ptr(arg1);
}


SWIGEXPORT void JNICALL Java_isoObject_1wrapJNI_uint32ptr_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  uint32_t *arg1 = (uint32_t *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_t **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  uint32ptr_assign(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_uint32ptr_1value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint32_t *arg1 = (uint32_t *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint32_t **)&jarg1; 
  result = (uint32_t)uint32ptr_value(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Unknown_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Unknown **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Off_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Off **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Init_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Init **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Armed_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Armed **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Disarmed_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Disarmed **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Running_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Running **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_PostRun_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::PostRun **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_RemoteControlled_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::RemoteControlled **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Aborting_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::Aborting **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_PreArming_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::PreArming **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_PreRunning_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ISO22133::State **)&baseptr = *(ISO22133::PreRunning **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Socket_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BasicSocket **)&baseptr = *(Socket **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_Server_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(BasicSocket **)&baseptr = *(Server **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_TCPServer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Server **)&baseptr = *(TCPServer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_isoObject_1wrapJNI_UDPServer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Server **)&baseptr = *(UDPServer **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

