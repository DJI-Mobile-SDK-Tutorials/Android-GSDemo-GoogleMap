/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package com.asta.isoObject;


public class isoObject_wrapJNI {
  public final static native long new_TrajDecoder__SWIG_0(boolean jarg1);
  public final static native long new_TrajDecoder__SWIG_1();
  public final static native int TrajDecoder_DecodeTRAJ(long jarg1, TrajDecoder jarg1_, long jarg2);
  public final static native boolean TrajDecoder_ExpectingTrajPoints(long jarg1, TrajDecoder jarg1_);
  public final static native long TrajDecoder_getTrajHeader(long jarg1, TrajDecoder jarg1_);
  public final static native long TrajDecoder_getTraj(long jarg1, TrajDecoder jarg1_);
  public final static native void delete_TrajDecoder(long jarg1);
  public final static native int ISO_OBJECT_STATE_UNKNOWN_get();
  public final static native int ISO_OBJECT_STATE_OFF_get();
  public final static native int ISO_OBJECT_STATE_INIT_get();
  public final static native int ISO_OBJECT_STATE_ARMED_get();
  public final static native int ISO_OBJECT_STATE_DISARMED_get();
  public final static native int ISO_OBJECT_STATE_RUNNING_get();
  public final static native int ISO_OBJECT_STATE_POSTRUN_get();
  public final static native int ISO_OBJECT_STATE_REMOTE_CONTROLLED_get();
  public final static native int ISO_OBJECT_STATE_ABORTING_get();
  public final static native int ISO_OBJECT_STATE_PRE_ARMING_get();
  public final static native int ISO_OBJECT_STATE_PRE_RUNNING_get();
  public final static native long descriptions_get();
  public final static native long stateNames_get();
  public final static native void delete_State(long jarg1);
  public final static native int State_getStateID(long jarg1, State jarg1_);
  public final static native String State_getName(long jarg1, State jarg1_);
  public final static native void State_handleEvent(long jarg1, State jarg1_, long jarg2, TestObject jarg2_, int jarg3);
  public final static native int Unknown_getStateID(long jarg1, Unknown jarg1_);
  public final static native long new_Unknown();
  public final static native void delete_Unknown(long jarg1);
  public final static native int Off_getStateID(long jarg1, Off jarg1_);
  public final static native long new_Off();
  public final static native void delete_Off(long jarg1);
  public final static native int Init_getStateID(long jarg1, Init jarg1_);
  public final static native void Init_onExit(long jarg1, Init jarg1_, long jarg2, TestObject jarg2_);
  public final static native long new_Init();
  public final static native void delete_Init(long jarg1);
  public final static native int Armed_getStateID(long jarg1, Armed jarg1_);
  public final static native long new_Armed();
  public final static native void delete_Armed(long jarg1);
  public final static native int Disarmed_getStateID(long jarg1, Disarmed jarg1_);
  public final static native void Disarmed_onEnter(long jarg1, Disarmed jarg1_, long jarg2, TestObject jarg2_);
  public final static native void Disarmed_onExit(long jarg1, Disarmed jarg1_, long jarg2, TestObject jarg2_);
  public final static native long new_Disarmed();
  public final static native void delete_Disarmed(long jarg1);
  public final static native int Running_getStateID(long jarg1, Running jarg1_);
  public final static native long new_Running();
  public final static native void delete_Running(long jarg1);
  public final static native int PostRun_getStateID(long jarg1, PostRun jarg1_);
  public final static native long new_PostRun();
  public final static native void delete_PostRun(long jarg1);
  public final static native int RemoteControlled_getStateID(long jarg1, RemoteControlled jarg1_);
  public final static native long new_RemoteControlled();
  public final static native void delete_RemoteControlled(long jarg1);
  public final static native int Aborting_getStateID(long jarg1, Aborting jarg1_);
  public final static native long new_Aborting();
  public final static native void delete_Aborting(long jarg1);
  public final static native int PreArming_getStateID(long jarg1, PreArming jarg1_);
  public final static native void PreArming_onEnter(long jarg1, PreArming jarg1_, long jarg2, TestObject jarg2_);
  public final static native long new_PreArming();
  public final static native void delete_PreArming(long jarg1);
  public final static native int PreRunning_getStateID(long jarg1, PreRunning jarg1_);
  public final static native void PreRunning_onEnter(long jarg1, PreRunning jarg1_, long jarg2, TestObject jarg2_);
  public final static native long new_PreRunning();
  public final static native void delete_PreRunning(long jarg1);
  public final static native void Transition_source_set(long jarg1, Transition jarg1_, int jarg2);
  public final static native int Transition_source_get(long jarg1, Transition jarg1_);
  public final static native void Transition_event_set(long jarg1, Transition jarg1_, int jarg2);
  public final static native int Transition_event_get(long jarg1, Transition jarg1_);
  public final static native void Transition_target_set(long jarg1, Transition jarg1_, int jarg2);
  public final static native int Transition_target_get(long jarg1, Transition jarg1_);
  public final static native long new_Transition();
  public final static native void delete_Transition(long jarg1);
  public final static native boolean LessThan(long jarg1, Transition jarg1_, long jarg2, Transition jarg2_);
  public final static native long language_get();
  public final static native long new_TestObject__SWIG_0(String jarg1);
  public final static native long new_TestObject__SWIG_1();
  public final static native void delete_TestObject(long jarg1);
  public final static native void TestObject_disconnect(long jarg1, TestObject jarg1_);
  public final static native String TestObject_getCurrentStateName(long jarg1, TestObject jarg1_);
  public final static native String TestObject_getName(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getPosition(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getSpeed(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getAcceleration(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getDriveDirection(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getTrajectoryHeader(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getTrajectory(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getOrigin(long jarg1, TestObject jarg1_);
  public final static native String TestObject_getLocalIP(long jarg1, TestObject jarg1_);
  public final static native long TestObject_getTransmitterID(long jarg1, TestObject jarg1_);
  public final static native int BasicSocket_STREAM_get();
  public final static native int BasicSocket_DATAGRAM_get();
  public final static native void BasicSocket_HostInfo_address_set(long jarg1, BasicSocket.HostInfo jarg1_, String jarg2);
  public final static native String BasicSocket_HostInfo_address_get(long jarg1, BasicSocket.HostInfo jarg1_);
  public final static native void BasicSocket_HostInfo_port_set(long jarg1, BasicSocket.HostInfo jarg1_, int jarg2);
  public final static native int BasicSocket_HostInfo_port_get(long jarg1, BasicSocket.HostInfo jarg1_);
  public final static native long new_BasicSocket_HostInfo();
  public final static native void delete_BasicSocket_HostInfo(long jarg1);
  public final static native long new_BasicSocket__SWIG_0();
  public final static native long new_BasicSocket__SWIG_1(int jarg1, boolean jarg2);
  public final static native long new_BasicSocket__SWIG_2(int jarg1);
  public final static native long new_BasicSocket__SWIG_3(int jarg1, boolean jarg2);
  public final static native long new_BasicSocket__SWIG_4(int jarg1);
  public final static native void delete_BasicSocket(long jarg1);
  public final static native long new_BasicSocket__SWIG_5(long jarg1, BasicSocket jarg1_);
  public final static native long BasicSocket_SocketEqual__SWIG_0(long jarg1, BasicSocket jarg1_, long jarg2, BasicSocket jarg2_);
  public final static native void BasicSocket_setDebug__SWIG_0(long jarg1, BasicSocket jarg1_, boolean jarg2);
  public final static native void BasicSocket_setDebug__SWIG_1(long jarg1, BasicSocket jarg1_);
  public final static native void BasicSocket_setReuseAddr__SWIG_0(long jarg1, BasicSocket jarg1_, boolean jarg2);
  public final static native void BasicSocket_setReuseAddr__SWIG_1(long jarg1, BasicSocket jarg1_);
  public final static native void BasicSocket_setKeepAlive__SWIG_0(long jarg1, BasicSocket jarg1_, boolean jarg2);
  public final static native void BasicSocket_setKeepAlive__SWIG_1(long jarg1, BasicSocket jarg1_);
  public final static native void BasicSocket_setLinger__SWIG_0(long jarg1, BasicSocket jarg1_, boolean jarg2);
  public final static native void BasicSocket_setLinger__SWIG_1(long jarg1, BasicSocket jarg1_);
  public final static native void BasicSocket_setLingerSeconds(long jarg1, BasicSocket jarg1_, int jarg2);
  public final static native void BasicSocket_setBlocking__SWIG_0(long jarg1, BasicSocket jarg1_, boolean jarg2);
  public final static native void BasicSocket_setBlocking__SWIG_1(long jarg1, BasicSocket jarg1_);
  public final static native boolean BasicSocket_getBlocking(long jarg1, BasicSocket jarg1_);
  public final static native int BasicSocket_getType(long jarg1, BasicSocket jarg1_);
  public final static native String BasicSocket_getRemoteIP(long jarg1, BasicSocket jarg1_);
  public final static native String BasicSocket_getLocalIP(long jarg1, BasicSocket jarg1_);
  public final static native int BasicSocket_getRemotePort(long jarg1, BasicSocket jarg1_);
  public final static native int BasicSocket_getLocalPort(long jarg1, BasicSocket jarg1_);
  public final static native void BasicSocket_close(long jarg1, BasicSocket jarg1_);
  public final static native void BasicSocket_open(long jarg1, BasicSocket jarg1_, int jarg2);
  public final static native long new_Socket__SWIG_0(long jarg1, Socket jarg1_);
  public final static native long Socket_recv(long jarg1, Socket jarg1_);
  public final static native void Socket_send__SWIG_0(long jarg1, Socket jarg1_, long jarg2);
  public final static native void Socket_send__SWIG_1(long jarg1, Socket jarg1_, long jarg2, long jarg3);
  public final static native void delete_Socket(long jarg1);
  public final static native long new_Server__SWIG_0(int jarg1, boolean jarg2);
  public final static native long new_Server__SWIG_1(int jarg1);
  public final static native long new_Server__SWIG_2(int jarg1, String jarg2, int jarg3, boolean jarg4);
  public final static native long new_Server__SWIG_3(int jarg1, String jarg2, int jarg3);
  public final static native void delete_Server(long jarg1);
  public final static native long new_TCPServer__SWIG_0(boolean jarg1);
  public final static native long new_TCPServer__SWIG_1();
  public final static native long new_TCPServer__SWIG_2(String jarg1, int jarg2, boolean jarg3);
  public final static native long new_TCPServer__SWIG_3(String jarg1, int jarg2);
  public final static native long TCPServer_await__SWIG_0(long jarg1, TCPServer jarg1_);
  public final static native long TCPServer_await__SWIG_1(long jarg1, TCPServer jarg1_, String jarg2, int jarg3);
  public final static native void delete_TCPServer(long jarg1);
  public final static native long new_UDPServer__SWIG_0(boolean jarg1);
  public final static native long new_UDPServer__SWIG_1();
  public final static native long new_UDPServer__SWIG_2(String jarg1, int jarg2, boolean jarg3);
  public final static native long new_UDPServer__SWIG_3(String jarg1, int jarg2);
  public final static native void UDPServer_bind(long jarg1, UDPServer jarg1_, long jarg2, BasicSocket.HostInfo jarg2_);
  public final static native long UDPServer_recvfrom(long jarg1, UDPServer jarg1_);
  public final static native void UDPServer_sendto__SWIG_0(long jarg1, UDPServer jarg1_, long jarg2);
  public final static native void UDPServer_sendto__SWIG_1(long jarg1, UDPServer jarg1_, long jarg2, long jarg3);
  public final static native void delete_UDPServer(long jarg1);
  public final static native void timeval_tv_sec_set(long jarg1, timeval jarg1_, int jarg2);
  public final static native int timeval_tv_sec_get(long jarg1, timeval jarg1_);
  public final static native void timeval_tv_usec_set(long jarg1, timeval jarg1_, int jarg2);
  public final static native int timeval_tv_usec_get(long jarg1, timeval jarg1_);
  public final static native long new_timeval();
  public final static native void delete_timeval(long jarg1);
  public final static native long new_uint32ptr();
  public final static native long copy_uint32ptr(long jarg1);
  public final static native void delete_uint32ptr(long jarg1);
  public final static native void uint32ptr_assign(long jarg1, long jarg2);
  public final static native long uint32ptr_value(long jarg1);
  public final static native long Unknown_SWIGUpcast(long jarg1);
  public final static native long Off_SWIGUpcast(long jarg1);
  public final static native long Init_SWIGUpcast(long jarg1);
  public final static native long Armed_SWIGUpcast(long jarg1);
  public final static native long Disarmed_SWIGUpcast(long jarg1);
  public final static native long Running_SWIGUpcast(long jarg1);
  public final static native long PostRun_SWIGUpcast(long jarg1);
  public final static native long RemoteControlled_SWIGUpcast(long jarg1);
  public final static native long Aborting_SWIGUpcast(long jarg1);
  public final static native long PreArming_SWIGUpcast(long jarg1);
  public final static native long PreRunning_SWIGUpcast(long jarg1);
  public final static native long Socket_SWIGUpcast(long jarg1);
  public final static native long Server_SWIGUpcast(long jarg1);
  public final static native long TCPServer_SWIGUpcast(long jarg1);
  public final static native long UDPServer_SWIGUpcast(long jarg1);
}
